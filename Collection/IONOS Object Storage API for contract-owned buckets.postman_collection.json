{
	"info": {
		"_postman_id": "59c0152c-0ce8-4c6e-89d0-03b01acdd725",
		"name": "IONOS Object Storage API for contract-owned buckets",
		"description": "## Overview\nThe IONOS Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with\nIONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless\ncompatibility with existing tools and libraries tailored for S3 systems.\n\n### API References\n- [Object Storage Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys\n- Object Storage API Reference for contract-owned buckets - current document\n- [Object Storage API Reference for user-owned buckets](https://api.ionos.com/docs/s3-user-owned-buckets/v2/)\n\n### User documentation\n[IONOS Object Storage User Guide](https://docs.ionos.com/cloud/storage-and-backup/ionos-object-storage)\n* [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets)\n* [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility)\n* [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)\n\n## Endpoints for contract-owned buckets\n| Location | Region Name | Bucket Type | Endpoint |\n| --- | --- | --- | --- |\n| **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |\n| **Lenexa, US** | **us-central-1** | Contract-owned | `https://s3.us-central-1.ionoscloud.com` |\n\n## Changelog\n- 30.05.2024 Initial version\n- 09.12.2024 Adding new location us-central-1 (Lenexa, USA) to documentation\n\n\nContact Support:\n Name: IONOS Cloud Support\n Email: support@cloud.ionos.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5503703"
	},
	"item": [
		{
			"name": "/",
			"item": [
				{
					"name": "ListBuckets",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "Lists all the buckets of the contract.\n\n#### Permissions\nThis operation is available for all users of the contract.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ListAllMyBucketsResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Owner>\n    <ID>(integer)</ID>\n    <DisplayName>(string)</DisplayName>\n  </Owner>\n  <Bucket>\n    <Name>(string)</Name>\n    <CreationDate>(string)</CreationDate>\n  </Bucket>\n  <Bucket>\n    <Name>(string)</Name>\n    <CreationDate>(string)</CreationDate>\n  </Bucket>\n</ListAllMyBucketsResult>"
						},
						{
							"name": "InvalidAccessKeyId",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}",
			"item": [
				{
					"name": "{Key}?uploads",
					"item": [
						{
							"name": "CreateMultipartUpload",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "<string>",
										"description": "Specifies caching behavior along the request/reply chain."
									},
									{
										"key": "Content-Disposition",
										"value": "<string>",
										"description": "Specifies presentational information for the object."
									},
									{
										"key": "Content-Encoding",
										"value": "<string>",
										"description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field."
									},
									{
										"key": "Expires",
										"value": "<dateTime>",
										"description": "The date and time at which the object is no longer cacheable."
									},
									{
										"key": "x-amz-server-side-encryption",
										"value": "AES256",
										"description": "The server-side encryption algorithm used when storing this object in IONOS Object Storage (AES256)."
									},
									{
										"key": "x-amz-storage-class",
										"value": "STANDARD",
										"description": "IONOS Object Storage uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability."
									},
									{
										"key": "x-amz-website-redirect-location",
										"value": "<string>",
										"description": "If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. IONOS Object Storage stores the value of this header in the object metadata."
									},
									{
										"key": "x-amz-server-side-encryption-customer-algorithm",
										"value": "<string>",
										"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key",
										"value": "<string>",
										"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use in encrypting data. This value is used to store the object and then it is discarded; IONOS Object Storage does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key-MD5",
										"value": "<string>",
										"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
									},
									{
										"key": "x-amz-object-lock-mode",
										"value": "GOVERNANCE",
										"description": "Specifies the Object Lock mode that you want to apply to the uploaded object."
									},
									{
										"key": "x-amz-object-lock-retain-until-date",
										"value": "<dateTime>",
										"description": "Specifies the date and time when you want the Object Lock to expire."
									},
									{
										"key": "x-amz-object-lock-legal-hold",
										"value": "ON",
										"description": "Specifies whether you want to apply a Legal Hold to the uploaded object."
									},
									{
										"key": "x-amz-meta-",
										"value": "<string>",
										"description": "A map of metadata to store with the object."
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?uploads&uploads=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "uploads",
											"value": null
										},
										{
											"key": "uploads",
											"value": "true",
											"description": "(Required) "
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "<p>This operation initiates a multipart upload and returns an upload ID. This upload ID is used to associate all of the parts in the specific multipart upload. You specify this upload ID in each of your subsequent upload part requests. You also include this upload ID in the final request to either complete or abort the multipart upload request.</p>"
							},
							"response": [
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "<string>",
												"description": "Specifies caching behavior along the request/reply chain."
											},
											{
												"key": "Content-Disposition",
												"value": "<string>",
												"description": "Specifies presentational information for the object."
											},
											{
												"key": "Content-Encoding",
												"value": "<string>",
												"description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field."
											},
											{
												"key": "Expires",
												"value": "<dateTime>",
												"description": "The date and time at which the object is no longer cacheable."
											},
											{
												"key": "x-amz-server-side-encryption",
												"value": "AES256",
												"description": "The server-side encryption algorithm used when storing this object in IONOS Object Storage (AES256)."
											},
											{
												"key": "x-amz-storage-class",
												"value": "STANDARD",
												"description": "IONOS Object Storage uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability."
											},
											{
												"key": "x-amz-website-redirect-location",
												"value": "<string>",
												"description": "If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. IONOS Object Storage stores the value of this header in the object metadata."
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "<string>",
												"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use in encrypting data. This value is used to store the object and then it is discarded; IONOS Object Storage does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
											},
											{
												"key": "x-amz-object-lock-mode",
												"value": "GOVERNANCE",
												"description": "Specifies the Object Lock mode that you want to apply to the uploaded object."
											},
											{
												"key": "x-amz-object-lock-retain-until-date",
												"value": "<dateTime>",
												"description": "Specifies the date and time when you want the Object Lock to expire."
											},
											{
												"key": "x-amz-object-lock-legal-hold",
												"value": "ON",
												"description": "Specifies whether you want to apply a Legal Hold to the uploaded object."
											},
											{
												"key": "x-amz-meta-",
												"value": "<string>",
												"description": "A map of metadata to store with the object."
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?uploads=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "uploads",
													"value": "true",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Name>(string)</Name>\n  <Key>(string)</Key>\n  <UploadId>(string)</UploadId>\n</element>"
								}
							]
						}
					]
				},
				{
					"name": "{Key}?uploadId",
					"item": [
						{
							"name": "CompleteMultipartUpload",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CompleteMultipartUpload>\n    <Parts>\n      <ETag>(string)</ETag>\n      <PartNumber>(integer)</PartNumber>\n    </Parts>\n    <Parts>\n      <ETag>(string)</ETag>\n      <PartNumber>(integer)</PartNumber>\n    </Parts>\n  </CompleteMultipartUpload>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?uploadId&uploadId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "uploadId",
											"value": null
										},
										{
											"key": "uploadId",
											"value": "<string>",
											"description": "(Required) ID for the initiated multipart upload."
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "<p>Completes a multipart upload by assembling previously uploaded parts.</p>          <p>After successfully uploading all relevant parts of an upload, you call this operation to complete the upload. When IONOS Object Storage  receives this request,  it concatenates all the parts in ascending  order by part number to create a new object. The parts  list must be included in the Complete Multipart Upload request. You must ensure that the parts list is complete. This operation concatenates the parts that you provide in the list. For each part in the list, you must provide the part number and the `ETag` value, returned after that part was uploaded.</p> <p>A Complete Multipart Upload request could take several minutes to process.  After IONOS Object Storage begins processing the request, it sends  an HTTP response header indicating a 200 OK response. While processing is  in progress, IONOS Object Storage sends white space characters  on a regular basis to keep the connection from timing out. Because a request  may fail after receiving the initial 200 OK response, it is advisable to  check the response body to establish whether the request was successful.</p>  <p> `CompleteMultipartUpload` has the following special errors:</p> <ul> <li> <p>Error code: `EntityTooSmall` </p> <ul> <li> <p>Description: Your proposed upload is smaller than the minimum allowed object size. Each part must be at least 5 MB in size, except the last part.</p> </li> <li> <p>400 Bad Request</p> </li> </ul> </li> <li> <p>Error code: `InvalidPart` </p> <ul> <li> <p>Description: One or more of the specified parts could not be found. The part might not have been uploaded, or the specified entity tag might not have matched the part's entity tag.</p> </li> <li> <p>400 Bad Request</p> </li> </ul> </li> <li> <p>Error code: `InvalidPartOrder` </p> <ul> <li> <p>Description: The list of parts was not in ascending order. The parts list must be specified in order by part number.</p> </li> <li> <p>400 Bad Request</p> </li> </ul> </li> <li> <p>Error code: `NoSuchUpload` </p> <ul> <li> <p>Description: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed.</p> </li> <li> <p>404 Not Found</p> </li> </ul> </li> </ul> "
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CompleteMultipartUpload>\n    <Parts>\n      <ETag>(string)</ETag>\n      <PartNumber>(integer)</PartNumber>\n    </Parts>\n    <Parts>\n      <ETag>(string)</ETag>\n      <PartNumber>(integer)</PartNumber>\n    </Parts>\n  </CompleteMultipartUpload>\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?uploadId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "uploadId",
													"value": "<string>",
													"description": "(Required) ID for the initiated multipart upload."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Location>(string)</Location>\n  <Name>(string)</Name>\n  <Key>(string)</Key>\n  <ETag>(string)</ETag>\n</element>"
								}
							]
						},
						{
							"name": "ListParts",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?uploadId&max-parts=<integer>&part-number-marker=<integer>&uploadId=<string>&PartNumberMarker=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "uploadId",
											"value": null
										},
										{
											"key": "max-parts",
											"value": "<integer>",
											"description": "Sets the maximum number of parts to return."
										},
										{
											"key": "part-number-marker",
											"value": "<integer>",
											"description": "Specifies the part after which listing should begin. Only parts with higher part numbers will be listed."
										},
										{
											"key": "uploadId",
											"value": "<string>",
											"description": "(Required) Upload ID identifying the multipart upload whose parts are being listed."
										},
										{
											"key": "PartNumberMarker",
											"value": "<string>",
											"description": "Pagination token"
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "<p>Lists the parts that have been uploaded for a specific multipart upload. This operation must include the upload ID, which you obtain by sending the initiate multipart upload request. This request returns a maximum of 1,000 uploaded parts. The default number of parts returned is 1,000 parts. You can restrict the number of parts returned by specifying the `max-parts` request parameter. If your multipart upload consists of more than 1,000 parts, the response returns an `IsTruncated` field with the value of true, and a `NextPartNumberMarker` element. In subsequent `ListParts` requests you can include the part-number-marker query string parameter and set its value to the `NextPartNumberMarker` field value from the previous response.</p>"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?max-parts=<integer>&part-number-marker=<integer>&uploadId=<string>&PartNumberMarker=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "max-parts",
													"value": "<integer>",
													"description": "Sets the maximum number of parts to return."
												},
												{
													"key": "part-number-marker",
													"value": "<integer>",
													"description": "Specifies the part after which listing should begin. Only parts with higher part numbers will be listed."
												},
												{
													"key": "uploadId",
													"value": "<string>",
													"description": "(Required) Upload ID identifying the multipart upload whose parts are being listed."
												},
												{
													"key": "PartNumberMarker",
													"value": "<string>",
													"description": "Pagination token"
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Name>(string)</Name>\n  <Key>(string)</Key>\n  <UploadId>(string)</UploadId>\n  <PartNumberMarker>(integer)</PartNumberMarker>\n  <NextPartNumberMarker>(string)</NextPartNumberMarker>\n  <MaxParts>(string)</MaxParts>\n  <IsTruncated>(boolean)</IsTruncated>\n  <Part>\n    <PartNumber>(integer)</PartNumber>\n    <LastModified>(string)</LastModified>\n    <ETag>(string)</ETag>\n    <Size>(integer)</Size>\n  </Part>\n  <Part>\n    <PartNumber>(integer)</PartNumber>\n    <LastModified>(string)</LastModified>\n    <ETag>(string)</ETag>\n    <Size>(integer)</Size>\n  </Part>\n  <Initiator>\n    <ID>(integer)</ID>\n    <DisplayName>(string)</DisplayName>\n  </Initiator>\n  <Owner>\n    <ID>(integer)</ID>\n    <DisplayName>(string)</DisplayName>\n  </Owner>\n  <StorageClass>(string)</StorageClass>\n</element>"
								}
							]
						},
						{
							"name": "UploadPart",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Length",
										"value": "<integer>",
										"description": "Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically."
									},
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "x-amz-server-side-encryption-customer-algorithm",
										"value": "AES256",
										"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key",
										"value": "<string>",
										"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use in encrypting data. This value is used to store the object and then it is discarded; IONOS Object Storage does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm header`. This must be the same encryption key specified in the initiate multipart upload request."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key-MD5",
										"value": "<string>",
										"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Body>(string)</Body>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?uploadId&partNumber=<integer>&uploadId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "uploadId",
											"value": null
										},
										{
											"key": "partNumber",
											"value": "<integer>",
											"description": "(Required) Part number of part being uploaded. This is a positive integer between 1 and 10,000."
										},
										{
											"key": "uploadId",
											"value": "<string>",
											"description": "(Required) Upload ID identifying the multipart upload whose part is being uploaded."
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "<p>Uploads a part in a multipart upload.</p> <note> <p>In this operation, you provide part data in your request. However, you have an option to specify your existing IONOS Object Storage object as a data source for the part you are uploading. To upload a part from an existing object, you use the `UploadPartCopy` operation. </p> </note> <p>You must initiate a multipart upload (see `CreateMultipartUpload`) before you can upload any part. In response to your initiate request, IONOS Object Storage returns an upload ID, a unique identifier, that you must include in your upload part request.</p> <p>Part numbers can be any number from 1 to 10,000, inclusive. A part number uniquely identifies a part and also defines its position within the object being created. If you upload a new part using the same part number that was used with a previous part, the previously uploaded part is overwritten. Each part must be at least 5 MB in size, except the last part. There is no size limit on the last part of your multipart upload.</p> <p>To ensure that data is not corrupted when traversing the network, specify the `Content-MD5` header in the upload part request. IONOS Object Storage checks the part data against the provided MD5 value. If they do not match, IONOS Object Storage returns an error. </p> <p>If the upload request is signed with Signature Version 4, then IONOS Object Storage uses the `x-amz-content-sha256` header as a checksum instead of `Content-MD5`. </p> <p> <b>Note:</b> After you initiate multipart upload and upload one or more parts, you must either complete or abort multipart upload in order to stop getting charged for storage of the uploaded parts. Only after you either complete or abort multipart upload, IONOS Object Storage frees up the parts storage and stops charging you for the parts storage.</p> "
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Length",
												"value": "<integer>",
												"description": "Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically."
											},
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "AES256",
												"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use in encrypting data. This value is used to store the object and then it is discarded; IONOS Object Storage does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm header`. This must be the same encryption key specified in the initiate multipart upload request."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Body>(string)</Body>\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?partNumber=<integer>&uploadId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "partNumber",
													"value": "<integer>",
													"description": "(Required) Part number of part being uploaded. This is a positive integer between 1 and 10,000."
												},
												{
													"key": "uploadId",
													"value": "<string>",
													"description": "(Required) Upload ID identifying the multipart upload whose part is being uploaded."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n</element>"
								}
							]
						},
						{
							"name": "AbortMultipartUpload",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?uploadId&uploadId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "uploadId",
											"value": null
										},
										{
											"key": "uploadId",
											"value": "<string>",
											"description": "(Required) Upload ID that identifies the multipart upload."
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "<p>This operation aborts a multipart upload. After a multipart upload is aborted, no additional parts can be uploaded using that upload ID. The storage consumed by any previously uploaded parts will be freed. However, if any part uploads are currently in progress, those part uploads might or might not succeed. As a result, it might be necessary to abort a given multipart upload multiple times in order to completely free all storage consumed by all parts. </p>"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?uploadId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "uploadId",
													"value": "<string>",
													"description": "(Required) Upload ID that identifies the multipart upload."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n</element>"
								},
								{
									"name": "NoSuchUpload",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "aplication/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?uploadId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "uploadId",
													"value": "<string>",
													"description": "(Required) Upload ID that identifies the multipart upload."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"code": 480,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "aplication/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n  \"Code\": \"NoSuchKey\",\n  \"Message\": \"<string>\",\n  \"RequestId\": \"<string>\",\n  \"HostId\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "{Key}",
					"item": [
						{
							"name": "GetObject",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "If-Match",
										"value": "<string>",
										"description": "Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed)."
									},
									{
										"key": "If-Modified-Since",
										"value": "<dateTime>",
										"description": "Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified)."
									},
									{
										"key": "If-None-Match",
										"value": "<string>",
										"description": "Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified)."
									},
									{
										"key": "If-Unmodified-Since",
										"value": "<dateTime>",
										"description": "Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed)."
									},
									{
										"key": "Range",
										"value": "<string>",
										"description": "<p>Downloads the specified range bytes of an object. For more information about the HTTP Range header, see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\">Range</a>.</p> <note> <p>IONOS Object Storage doesn't support retrieving multiple ranges of data per `GET` request.</p> </note>"
									},
									{
										"key": "x-amz-server-side-encryption-customer-algorithm",
										"value": "AES256",
										"description": "Specifies the algorithm to use to when decrypting the object (AES256)."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key",
										"value": "<string>",
										"description": "Specifies the customer-provided encryption key for IONOS Object Storage used to encrypt the data. This value is used to decrypt the object when recovering it and must match the one used when storing the data. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key-MD5",
										"value": "<string>",
										"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket/:Key?response-cache-control=<string>&response-content-disposition=<string>&response-content-encoding=<string>&response-content-language=<string>&response-content-type=<string>&response-expires=<dateTime>&versionId=<string>&partNumber=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										":Key"
									],
									"query": [
										{
											"key": "response-cache-control",
											"value": "<string>",
											"description": "Sets the `Cache-Control` header of the response."
										},
										{
											"key": "response-content-disposition",
											"value": "<string>",
											"description": "Sets the `Content-Disposition` header of the response"
										},
										{
											"key": "response-content-encoding",
											"value": "<string>",
											"description": "Sets the `Content-Encoding` header of the response."
										},
										{
											"key": "response-content-language",
											"value": "<string>",
											"description": "Sets the `Content-Language` header of the response."
										},
										{
											"key": "response-content-type",
											"value": "<string>",
											"description": "Sets the `Content-Type` header of the response."
										},
										{
											"key": "response-expires",
											"value": "<dateTime>",
											"description": "Sets the `Expires` header of the response."
										},
										{
											"key": "versionId",
											"value": "<string>",
											"description": "VersionId used to reference a specific version of the object."
										},
										{
											"key": "partNumber",
											"value": "<integer>",
											"description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object."
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "Key",
											"value": "<string>",
											"description": "(Required) <p> Key of the object to get. </p> <p> <b> Possible values:</b> length ≥ 1 </p>"
										}
									]
								},
								"description": "Retrieves objects from IONOS Object Storage.\n        \nAn IONOS Object Storage bucket has no directory hierarchy such as you would find in a typical computer\nfile system. You can, however, create a logical hierarchy by using object key names that imply a folder structure.\nFor example, instead of naming an object `test.jpg`, you can name it `photos/2022/July/test.jpg`.\n\nTo get an object from such a logical hierarchy, specify the full key name for the object\nin the `GET` operation:\n- For a virtual hosted-style request example, if you have the object\n`photos/2022/July/test.jpg`, specify the resource as\n`/photos/2022/July/test.jpg`. \n- For a path-style request example, if you have the object `photos/2022/July/test.jpg` in the bucket named\n`my-bucket`, specify the resource as `/my-bucket/photos/2022/July/test.jpg`.\n\nThis operation returns an `InvalidObjectStateError` error.\n\nIf you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C)\nwhen you store the object in IONOS Object Storage, then when you GET the object,\nyou must use the following headers:\n- x-amz-server-side-encryption-customer-algorithm\n- x-amz-server-side-encryption-customer-key\n- x-amz-server-side-encryption-customer-key-md5\n\n### Permissions\nYou must be the contract owner or an administrator to perform this operation.\nIf not, they can grant you permission to perform the `s3:ListBucket`\noperation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\nIf the object you request does not exist, the error IONOS Object Storage returns depends\non whether you also have the `ListBucket` permission:\n- If you have the `ListBucket` permission on the bucket, IONOS Object Storage will\nreturn an HTTP status code `404`.\n- If you don’t have the `ListBucket` permission, IONOS Object Storage\nwill return an HTTP status code `403` (\"Access denied\") error.\n\n### Versioning \nBy default, the GET operation returns the current version of an object. To return a different version,\nuse the `versionId` subresource.\n- You need the `GetObjectVersion` permission to access a\nspecific version of an object.\n- If the current version of the object is a delete marker, IONOS Object Storage behaves\nas if the object was deleted and includes `x-amz-delete-marker: true` in the\nresponse.\n\n\n### Overriding Response Header Values\n\nThere are times when you want to override certain response header values in a `GET`\nresponse. For example, you might override the `Content-Disposition`\nresponse header value in your `GET` request.\n\nYou can override values for a set of response headers using the following query\nparameters. These response header values are sent only on a successful\nrequest, that is, when status code `200 OK` is returned. The set of\nheaders you can override using these parameters is a subset of the\nheaders that IONOS Object Storage accepts when you create an object. \n\nThe response headers that you can override for the GET response are the following:\n- `Content-Type`\n- `Content-Language`\n- `Expires`\n- `Cache-Control`,\n- `Content-Disposition`\n- `Content-Encoding`. \n\nTo override these header values in the `GET` response, you use the following request parameters:\n- `partNumber`\n- `versionId`\n- `response-content-type`\n- `response-content-language`\n- `response-expires`\n- `response-cache-control`\n- `response-content-disposition`\n- `response-content-encoding`\n\nYou must sign the request, either using an Authorization header or a presigned URL, when using these\nparameters. They cannot be used with an unsigned (anonymous) request.\n\n### Additional Considerations about Request Headers\n\n- If a Etag value sent in the `If-Match` header doesn't match the object's ETag, then the `Precondition Failed` error is returned.\n\n- If both of the `If-Match` and `If-Unmodified-Since` headers are present in the request as follows: `If-Match`\ncondition evaluates to `true`, and; `If-Unmodified-Since` condition evaluates to `false`; then,\nthe API returns 200 OK and the data requested.\n\n- If both of the `If-None-Match` and `If-Modified-Since` headers are present in the request as\nfollows:` If-None-Match` condition evaluates to `false`, and; `If-Modified-Since` condition\nevaluates to `true`; then, the API returns `304 Not Modified` response code.\n\nFor more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
							},
							"response": [
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "If-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "If-Modified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-None-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-Unmodified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "Range",
												"value": "<string>",
												"description": "<p>Downloads the specified range bytes of an object. For more information about the HTTP Range header, see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\">Range</a>.</p> <note> <p>IONOS Object Storage doesn't support retrieving multiple ranges of data per `GET` request.</p> </note>"
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "AES256",
												"description": "Specifies the algorithm to use to when decrypting the object (AES256)."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the customer-provided encryption key for IONOS Object Storage used to encrypt the data. This value is used to decrypt the object when recovering it and must match the one used when storing the data. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/:Key?response-cache-control=<string>&response-content-disposition=<string>&response-content-encoding=<string>&response-content-language=<string>&response-content-type=<string>&response-expires=<dateTime>&versionId=<string>&partNumber=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												":Key"
											],
											"query": [
												{
													"key": "response-cache-control",
													"value": "<string>",
													"description": "Sets the `Cache-Control` header of the response."
												},
												{
													"key": "response-content-disposition",
													"value": "<string>",
													"description": "Sets the `Content-Disposition` header of the response"
												},
												{
													"key": "response-content-encoding",
													"value": "<string>",
													"description": "Sets the `Content-Encoding` header of the response."
												},
												{
													"key": "response-content-language",
													"value": "<string>",
													"description": "Sets the `Content-Language` header of the response."
												},
												{
													"key": "response-content-type",
													"value": "<string>",
													"description": "Sets the `Content-Type` header of the response."
												},
												{
													"key": "response-expires",
													"value": "<dateTime>",
													"description": "Sets the `Expires` header of the response."
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "VersionId used to reference a specific version of the object."
												},
												{
													"key": "partNumber",
													"value": "<integer>",
													"description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												},
												{
													"key": "Key"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										},
										{
											"key": "x-amz-meta-",
											"value": "<string>",
											"description": {
												"content": "Object metadata. Keys have `x-amz-meta-` prefix, for example, `x-amz-meta-mykey1`.",
												"type": "text/plain"
											}
										},
										{
											"key": "etag",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Body>(string)</Body>\n  <Metadata>\n  </Metadata>\n</element>"
								},
								{
									"name": "NoSuchBucket or NoSuchKey",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "If-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "If-Modified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-None-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-Unmodified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "Range",
												"value": "<string>",
												"description": "<p>Downloads the specified range bytes of an object. For more information about the HTTP Range header, see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\">Range</a>.</p> <note> <p>IONOS Object Storage doesn't support retrieving multiple ranges of data per `GET` request.</p> </note>"
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "AES256",
												"description": "Specifies the algorithm to use to when decrypting the object (AES256)."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the customer-provided encryption key for IONOS Object Storage used to encrypt the data. This value is used to decrypt the object when recovering it and must match the one used when storing the data. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/:Key?response-cache-control=<string>&response-content-disposition=<string>&response-content-encoding=<string>&response-content-language=<string>&response-content-type=<string>&response-expires=<dateTime>&versionId=<string>&partNumber=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												":Key"
											],
											"query": [
												{
													"key": "response-cache-control",
													"value": "<string>",
													"description": "Sets the `Cache-Control` header of the response."
												},
												{
													"key": "response-content-disposition",
													"value": "<string>",
													"description": "Sets the `Content-Disposition` header of the response"
												},
												{
													"key": "response-content-encoding",
													"value": "<string>",
													"description": "Sets the `Content-Encoding` header of the response."
												},
												{
													"key": "response-content-language",
													"value": "<string>",
													"description": "Sets the `Content-Language` header of the response."
												},
												{
													"key": "response-content-type",
													"value": "<string>",
													"description": "Sets the `Content-Type` header of the response."
												},
												{
													"key": "response-expires",
													"value": "<dateTime>",
													"description": "Sets the `Expires` header of the response."
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "VersionId used to reference a specific version of the object."
												},
												{
													"key": "partNumber",
													"value": "<integer>",
													"description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												},
												{
													"key": "Key"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								},
								{
									"name": "Precondition Failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "If-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "If-Modified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-None-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-Unmodified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "Range",
												"value": "<string>",
												"description": "<p>Downloads the specified range bytes of an object. For more information about the HTTP Range header, see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\">Range</a>.</p> <note> <p>IONOS Object Storage doesn't support retrieving multiple ranges of data per `GET` request.</p> </note>"
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "AES256",
												"description": "Specifies the algorithm to use to when decrypting the object (AES256)."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the customer-provided encryption key for IONOS Object Storage used to encrypt the data. This value is used to decrypt the object when recovering it and must match the one used when storing the data. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/:Key?response-cache-control=<string>&response-content-disposition=<string>&response-content-encoding=<string>&response-content-language=<string>&response-content-type=<string>&response-expires=<dateTime>&versionId=<string>&partNumber=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												":Key"
											],
											"query": [
												{
													"key": "response-cache-control",
													"value": "<string>",
													"description": "Sets the `Cache-Control` header of the response."
												},
												{
													"key": "response-content-disposition",
													"value": "<string>",
													"description": "Sets the `Content-Disposition` header of the response"
												},
												{
													"key": "response-content-encoding",
													"value": "<string>",
													"description": "Sets the `Content-Encoding` header of the response."
												},
												{
													"key": "response-content-language",
													"value": "<string>",
													"description": "Sets the `Content-Language` header of the response."
												},
												{
													"key": "response-content-type",
													"value": "<string>",
													"description": "Sets the `Content-Type` header of the response."
												},
												{
													"key": "response-expires",
													"value": "<dateTime>",
													"description": "Sets the `Expires` header of the response."
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "VersionId used to reference a specific version of the object."
												},
												{
													"key": "partNumber",
													"value": "<integer>",
													"description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												},
												{
													"key": "Key"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								},
								{
									"name": "InvalidObjectState",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "If-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "If-Modified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-None-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-Unmodified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "Range",
												"value": "<string>",
												"description": "<p>Downloads the specified range bytes of an object. For more information about the HTTP Range header, see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\">Range</a>.</p> <note> <p>IONOS Object Storage doesn't support retrieving multiple ranges of data per `GET` request.</p> </note>"
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "AES256",
												"description": "Specifies the algorithm to use to when decrypting the object (AES256)."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the customer-provided encryption key for IONOS Object Storage used to encrypt the data. This value is used to decrypt the object when recovering it and must match the one used when storing the data. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/:Key?response-cache-control=<string>&response-content-disposition=<string>&response-content-encoding=<string>&response-content-language=<string>&response-content-type=<string>&response-expires=<dateTime>&versionId=<string>&partNumber=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												":Key"
											],
											"query": [
												{
													"key": "response-cache-control",
													"value": "<string>",
													"description": "Sets the `Cache-Control` header of the response."
												},
												{
													"key": "response-content-disposition",
													"value": "<string>",
													"description": "Sets the `Content-Disposition` header of the response"
												},
												{
													"key": "response-content-encoding",
													"value": "<string>",
													"description": "Sets the `Content-Encoding` header of the response."
												},
												{
													"key": "response-content-language",
													"value": "<string>",
													"description": "Sets the `Content-Language` header of the response."
												},
												{
													"key": "response-content-type",
													"value": "<string>",
													"description": "Sets the `Content-Type` header of the response."
												},
												{
													"key": "response-expires",
													"value": "<dateTime>",
													"description": "Sets the `Expires` header of the response."
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "VersionId used to reference a specific version of the object."
												},
												{
													"key": "partNumber",
													"value": "<integer>",
													"description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												},
												{
													"key": "Key"
												}
											]
										}
									},
									"code": 481,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								}
							]
						},
						{
							"name": "POSTObject",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "<string>",
										"description": " Can be used to specify caching behavior along the request/reply chain. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">Cache-Control</a>."
									},
									{
										"key": "Content-Disposition",
										"value": "<string>",
										"description": "Specifies presentational information for the object. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1\">Content-Disposition</a>."
									},
									{
										"key": "Content-Encoding",
										"value": "<string>",
										"description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\">Content-Encoding</a>."
									},
									{
										"key": "Content-Language",
										"value": "<string>",
										"description": "The language the content is in."
									},
									{
										"key": "Content-Length",
										"value": "<integer>",
										"description": "Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13\">Content-Length</a>."
									},
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Expires",
										"value": "<dateTime>",
										"description": "The date and time at which the object is no longer cacheable. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21\">Expires</a>."
									},
									{
										"key": "x-amz-server-side-encryption",
										"value": "AES256",
										"description": "The server-side encryption algorithm used when storing this object in IONOS Object Storage (AES256)."
									},
									{
										"key": "x-amz-storage-class",
										"value": "STANDARD",
										"description": "IONOS Object Storage uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability."
									},
									{
										"key": "x-amz-website-redirect-location",
										"value": "<string>",
										"description": "<p>If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. IONOS Object Storage stores the value of this header in the object metadata.</p> <p>In the following example, the request header sets the redirect to an object (anotherPage.html) in the same bucket:</p> <p> `x-amz-website-redirect-location: /anotherPage.html` </p> <p>In the following example, the request header sets the object redirect to another website:</p> <p> `x-amz-website-redirect-location: http://www.example.com/` </p>"
									},
									{
										"key": "x-amz-server-side-encryption-customer-algorithm",
										"value": "AES256",
										"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key",
										"value": "<string>",
										"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use in encrypting data. This value is used to store the object and then it is discarded; IONOS Object Storage does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key-MD5",
										"value": "<string>",
										"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
									},
									{
										"key": "x-amz-server-side-encryption-context",
										"value": "<string>",
										"description": "Specifies the IONOS Object Storage Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs."
									},
									{
										"key": "x-amz-server-side-encryption-bucket-key-enabled",
										"value": "<boolean>",
										"description": "<p>Specifies whether IONOS Object Storage should use an Bucket Key for object encryption with server-side encryption. Setting this header to `true` causes IONOS Object Storage to use an Bucket Key for object encryption.</p> <p>Specifying this header with a PUT operation doesn’t affect bucket-level settings for Bucket Key.</p>"
									},
									{
										"key": "x-amz-request-payer",
										"value": "requester"
									},
									{
										"key": "x-amz-tagging",
										"value": "<string>",
										"description": "The tag-set for the object. The tag-set must be encoded as URL Query parameters. (For example, \"Key1=Value1\")"
									},
									{
										"key": "x-amz-object-lock-mode",
										"value": "GOVERNANCE",
										"description": "The Object Lock mode that you want to apply to this object."
									},
									{
										"key": "x-amz-object-lock-retain-until-date",
										"value": "<dateTime>",
										"description": "The date and time when you want this object's Object Lock to expire. Must be formatted as a timestamp parameter."
									},
									{
										"key": "x-amz-object-lock-legal-hold",
										"value": "ON",
										"description": "Specifies whether a legal hold will be applied to this object."
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Body>(string)</Body>\n  <x-amz-meta->\n  </x-amz-meta->\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket/:Key",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										":Key"
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "Key",
											"value": "<string>",
											"description": "(Required) Key name of the object to post."
										}
									]
								},
								"description": "<p> The POST operation adds an object to a specified bucket using HTML forms. POST is an alternate form  of PUT that enables browser-based uploads of objects into buckets. Parameters passed to PUT via HTTP Headers are instead passed to POST as form fields in the multipart/form-data encoded message body. </p>"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "<string>",
												"description": " Can be used to specify caching behavior along the request/reply chain. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">Cache-Control</a>."
											},
											{
												"key": "Content-Disposition",
												"value": "<string>",
												"description": "Specifies presentational information for the object. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1\">Content-Disposition</a>."
											},
											{
												"key": "Content-Encoding",
												"value": "<string>",
												"description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\">Content-Encoding</a>."
											},
											{
												"key": "Content-Language",
												"value": "<string>",
												"description": "The language the content is in."
											},
											{
												"key": "Content-Length",
												"value": "<integer>",
												"description": "Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13\">Content-Length</a>."
											},
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "Expires",
												"value": "<dateTime>",
												"description": "The date and time at which the object is no longer cacheable. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21\">Expires</a>."
											},
											{
												"key": "x-amz-server-side-encryption",
												"value": "AES256",
												"description": "The server-side encryption algorithm used when storing this object in IONOS Object Storage (AES256)."
											},
											{
												"key": "x-amz-storage-class",
												"value": "STANDARD",
												"description": "IONOS Object Storage uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability."
											},
											{
												"key": "x-amz-website-redirect-location",
												"value": "<string>",
												"description": "<p>If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. IONOS Object Storage stores the value of this header in the object metadata.</p> <p>In the following example, the request header sets the redirect to an object (anotherPage.html) in the same bucket:</p> <p> `x-amz-website-redirect-location: /anotherPage.html` </p> <p>In the following example, the request header sets the object redirect to another website:</p> <p> `x-amz-website-redirect-location: http://www.example.com/` </p>"
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "AES256",
												"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use in encrypting data. This value is used to store the object and then it is discarded; IONOS Object Storage does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
											},
											{
												"key": "x-amz-server-side-encryption-context",
												"value": "<string>",
												"description": "Specifies the IONOS Object Storage Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs."
											},
											{
												"key": "x-amz-server-side-encryption-bucket-key-enabled",
												"value": "<boolean>",
												"description": "<p>Specifies whether IONOS Object Storage should use an Bucket Key for object encryption with server-side encryption. Setting this header to `true` causes IONOS Object Storage to use an Bucket Key for object encryption.</p> <p>Specifying this header with a PUT operation doesn’t affect bucket-level settings for Bucket Key.</p>"
											},
											{
												"key": "x-amz-request-payer",
												"value": "requester"
											},
											{
												"key": "x-amz-tagging",
												"value": "<string>",
												"description": "The tag-set for the object. The tag-set must be encoded as URL Query parameters. (For example, \"Key1=Value1\")"
											},
											{
												"key": "x-amz-object-lock-mode",
												"value": "GOVERNANCE",
												"description": "The Object Lock mode that you want to apply to this object."
											},
											{
												"key": "x-amz-object-lock-retain-until-date",
												"value": "<dateTime>",
												"description": "The date and time when you want this object's Object Lock to expire. Must be formatted as a timestamp parameter."
											},
											{
												"key": "x-amz-object-lock-legal-hold",
												"value": "ON",
												"description": "Specifies whether a legal hold will be applied to this object."
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Body>(string)</Body>\n  <x-amz-meta->\n  </x-amz-meta->\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/:Key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												":Key"
											],
											"variable": [
												{
													"key": "Bucket"
												},
												{
													"key": "Key"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n</element>"
								}
							]
						},
						{
							"name": "HeadObject",
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "If-Match",
										"value": "<string>",
										"description": "Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed)."
									},
									{
										"key": "If-Modified-Since",
										"value": "<dateTime>",
										"description": "Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified)."
									},
									{
										"key": "If-None-Match",
										"value": "<string>",
										"description": "Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified)."
									},
									{
										"key": "If-Unmodified-Since",
										"value": "<dateTime>",
										"description": "Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed)."
									},
									{
										"key": "Range",
										"value": "<string>",
										"description": "<p>Downloads the specified range bytes of an object. For more information about the HTTP Range header, see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\">Range</a>.</p> <note> <p>IONOS Object Storage doesn't support retrieving multiple ranges of data per `GET` request.</p> </note>"
									},
									{
										"key": "x-amz-server-side-encryption-customer-algorithm",
										"value": "AES256",
										"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key",
										"value": "<string>",
										"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use in encrypting data. This value is used to store the object and then it is discarded; IONOS Object Storage does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key-MD5",
										"value": "<string>",
										"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket/:Key?versionId=<string>&partNumber=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										":Key"
									],
									"query": [
										{
											"key": "versionId",
											"value": "<string>",
											"description": "VersionId used to reference a specific version of the object."
										},
										{
											"key": "partNumber",
											"value": "<integer>",
											"description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object."
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "Key",
											"value": "<string>",
											"description": "(Required) The object key."
										}
									]
								},
								"description": "<p>The HEAD operation retrieves metadata from an object without returning the object itself. This operation is useful if you're only interested in an object's metadata. To use HEAD, you must have READ access to the object.</p> <p>A `HEAD` request has the same options as a `GET` operation on an object. The response is identical to the `GET` response except that there is no response body. Because of this, if the `HEAD` request generates an error, it returns a generic `404 Not Found` or `403 Forbidden` code. It is not possible to retrieve the exact exception beyond these error codes.</p> <p>If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in IONOS Object Storage, then when you retrieve the metadata from the object, you must use the following headers:</p> <ul> <li> <p>`x-amz-server-side-encryption-customer-algorithm` = `AES256`</p> </li> <li> <p>`x-amz-server-side-encryption-customer-key`</p> </li> <li> <p>`x-amz-server-side-encryption-customer-key-MD5`</p> </li> </ul> <note> <ul> <li> <p>Encryption request headers, like `x-amz-server-side-encryption`, should not be sent for GET requests if your object uses the server-side encryption with IONOS Object Storage–managed encryption keys (SSE-S3). If your object does use this type of keys, you’ll get an HTTP 400 BadRequest error.</p> </li> <li> <p> The last modified property in this case is the creation date of the object.</p> </li> </ul> </note> <p>Request headers are limited to 8 KB in size.</p> <p>Consider the following when using request headers:</p> <ul> <li> <p> Consideration 1 – If both of the `If-Match` and `If-Unmodified-Since` headers are present in the request as follows:</p> <ul> <li> <p> `If-Match` condition evaluates to `true`, and;</p> </li> <li> <p> `If-Unmodified-Since` condition evaluates to `false`;</p> </li> </ul> <p>Then IONOS Object Storage returns `200 OK` and the data requested.</p> </li> <li> <p> Consideration 2 – If both of the `If-None-Match` and `If-Modified-Since` headers are present in the request as follows:</p> <ul> <li> <p> `If-None-Match` condition evaluates to `false`, and;</p> </li> <li> <p> `If-Modified-Since` condition evaluates to `true`;</p> </li> </ul> <p>Then IONOS Object Storage returns the `304 Not Modified` response code.</p> </li> </ul> <p>For more information about conditional requests, see <a href=\"https://tools.ietf.org/html/rfc7232\">RFC 7232</a>.</p> <p> <b>Permissions</b> </p> <p>You need the relevant read object (or version) permission for this operation. If the object you request does not exist, the error IONOS Object Storage returns depends on whether you also have the ListBucket permission.</p> <ul> <li> <p>If you have the `ListBucket` permission on the bucket, IONOS Object Storage returns an HTTP status code 404 (\"no such key\") error.</p> </li> <li> <p>If you don’t have the `ListBucket` permission, IONOS Object Storage returns an HTTP status code 403 (\"access denied\") error.</p> </li> </ul>"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "HEAD",
										"header": [
											{
												"key": "If-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "If-Modified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-None-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-Unmodified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "Range",
												"value": "<string>",
												"description": "<p>Downloads the specified range bytes of an object. For more information about the HTTP Range header, see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\">Range</a>.</p> <note> <p>IONOS Object Storage doesn't support retrieving multiple ranges of data per `GET` request.</p> </note>"
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "AES256",
												"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use in encrypting data. This value is used to store the object and then it is discarded; IONOS Object Storage does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/:Key?versionId=<string>&partNumber=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												":Key"
											],
											"query": [
												{
													"key": "versionId",
													"value": "<string>",
													"description": "VersionId used to reference a specific version of the object."
												},
												{
													"key": "partNumber",
													"value": "<integer>",
													"description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												},
												{
													"key": "Key"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Metadata>\n  </Metadata>\n</element>"
								},
								{
									"name": "NoSuchKey",
									"originalRequest": {
										"method": "HEAD",
										"header": [
											{
												"key": "If-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is the same as the one specified, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "If-Modified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has been modified since the specified time, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-None-Match",
												"value": "<string>",
												"description": "Return the object only if its entity tag (ETag) is different from the one specified, otherwise return a 304 (not modified)."
											},
											{
												"key": "If-Unmodified-Since",
												"value": "<dateTime>",
												"description": "Return the object only if it has not been modified since the specified time, otherwise return a 412 (precondition failed)."
											},
											{
												"key": "Range",
												"value": "<string>",
												"description": "<p>Downloads the specified range bytes of an object. For more information about the HTTP Range header, see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35\">Range</a>.</p> <note> <p>IONOS Object Storage doesn't support retrieving multiple ranges of data per `GET` request.</p> </note>"
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "AES256",
												"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use in encrypting data. This value is used to store the object and then it is discarded; IONOS Object Storage does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/:Key?versionId=<string>&partNumber=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												":Key"
											],
											"query": [
												{
													"key": "versionId",
													"value": "<string>",
													"description": "VersionId used to reference a specific version of the object."
												},
												{
													"key": "partNumber",
													"value": "<integer>",
													"description": "Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												},
												{
													"key": "Key"
												}
											]
										}
									},
									"code": 480,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								}
							]
						},
						{
							"name": "PutObject",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cache-Control",
										"value": "<string>",
										"description": " Can be used to specify caching behavior along the request/reply chain. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">Cache-Control</a>."
									},
									{
										"key": "Content-Disposition",
										"value": "<string>",
										"description": "Specifies presentational information for the object. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1\">Content-Disposition</a>."
									},
									{
										"key": "Content-Encoding",
										"value": "<string>",
										"description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\">Content-Encoding</a>."
									},
									{
										"key": "Content-Language",
										"value": "<string>",
										"description": "The language the content is in."
									},
									{
										"key": "Content-Length",
										"value": "<integer>",
										"description": "Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13\">Content-Length</a>."
									},
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Expires",
										"value": "<dateTime>",
										"description": "The date and time at which the object is no longer cacheable. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21\">Expires</a>."
									},
									{
										"key": "x-amz-server-side-encryption",
										"value": "AES256",
										"description": "The server-side encryption algorithm used when storing this object in IONOS Object Storage (AES256)."
									},
									{
										"key": "x-amz-storage-class",
										"value": "STANDARD",
										"description": "The valid value is `STANDARD`."
									},
									{
										"key": "x-amz-website-redirect-location",
										"value": "<string>",
										"description": "<p>If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. IONOS Object Storage stores the value of this header in the object metadata.</p> <p>In the following example, the request header sets the redirect to an object (anotherPage.html) in the same bucket:</p> <p> `x-amz-website-redirect-location: /anotherPage.html` </p> <p>In the following example, the request header sets the object redirect to another website:</p> <p> `x-amz-website-redirect-location: http://www.example.com/` </p>"
									},
									{
										"key": "x-amz-server-side-encryption-customer-algorithm",
										"value": "AES256",
										"description": "Specifies the algorithm to use to when encrypting the object. The valid option is `AES256`."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key",
										"value": "<string>",
										"description": "Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data. For example, `4ZRNYBCCvL0YZeqo3f2+9qDyIfnLdbg5S99R2XWr0aw=`."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key-MD5",
										"value": "<string>",
										"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error. For example, `bPU7G1zD2MlOi5gqnkRqZg==`."
									},
									{
										"key": "x-amz-server-side-encryption-context",
										"value": "<string>",
										"description": "Specifies the IONOS Object Storage Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs."
									},
									{
										"key": "x-amz-request-payer",
										"value": "requester"
									},
									{
										"key": "x-amz-tagging",
										"value": "<string>",
										"description": "The tag-set for the object. The tag-set must be encoded as URL Query parameters. (For example, \"Key1=Value1\")"
									},
									{
										"key": "x-amz-object-lock-mode",
										"value": "GOVERNANCE",
										"description": "The Object Lock mode that you want to apply to this object."
									},
									{
										"key": "x-amz-object-lock-retain-until-date",
										"value": "<dateTime>",
										"description": "The date and time when you want this object's Object Lock to expire. Must be formatted as a timestamp parameter."
									},
									{
										"key": "x-amz-object-lock-legal-hold",
										"value": "ON",
										"description": "Specifies whether a legal hold will be applied to this object."
									},
									{
										"key": "Content-Type",
										"value": "text/plain"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Body\": \"<string>\",\n  \"x-amz-meta-\": {\n    \"deserunt2\": \"<string>\",\n    \"nonaf\": \"<string>\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket/:Key",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										":Key"
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "Key",
											"value": "<string>",
											"description": "(Required) Object key for which the PUT operation was initiated."
										}
									]
								},
								"description": "<p>Adds an object to a bucket. You must have WRITE permissions on a bucket to add an object to it.</p> <p>IONOS Object Storage never adds partial objects; if you receive a success response, IONOS Object Storage added the entire object to the bucket.</p> <p>IONOS Object Storage is a distributed system. If it receives multiple write requests for the same object simultaneously, it overwrites all but the last object written. IONOS Object Storage does not provide object locking; if you need this, make sure to build it into your application layer or use versioning instead.</p> <p>To ensure that data is not corrupted traversing the network, use the `Content-MD5` header. When you use this header, IONOS Object Storage checks the object against the provided MD5 value and, if they do not match, returns an error. Additionally, you can calculate the MD5 while putting an object to IONOS Object Storage and compare the returned ETag to the calculated MD5 value.</p> <note> <ul> <li> <p>To successfully complete the `PutObject` request, you must have the `PutObject` in your permissions.</p> </li> <li> <p>To successfully change the objects acl of your `PutObject` request, you must have the `PutObjectAcl` in your permissions.</p> </li> <li> <p> The `Content-MD5` header is required for any request to upload an object with a retention period configured using IONOS Object Storage Object Lock </i>. </p> </li> </ul> </note> <p><b>Versioning</b></p> <p>If you enable versioning for a bucket, IONOS Object Storage automatically generates a unique version ID for the object being stored. IONOS Object Storage returns this ID in the response. When you enable versioning for a bucket, if IONOS Object Storage receives multiple write requests for the same object simultaneously, it stores all of the objects.</p>\n<p><b>Server-side Encryption with IONOS Object Storage managed keys (SSE-S3)</b></p> <p>You can optionally request server-side encryption. With server-side encryption, IONOS Object Storage encrypts your data as it writes it to disks in its data centers and decrypts the data when you access it.  <ul> <li>the SSE-S3 encryption can be set as the default encryption for the bucket using <a href=\"#tag/Encryption/operation/PutBucketEncryption\">PutBucketEncryption</a>. This way all the newly created objects will be protected with SSE-S3 encryption even it was not specified in the `PutObject` operation.</li> <li>the SSE-S3 encryption can be applied to the object at the time of upload by setting `x-amz-server-side-encryption` header to `AES256`. This can be skipped if the default encryption has been set up for the bucket as described in the previous clause.</li> </ul>\n<p><b>Server-side Encryption with customer managed keys (SSE-C)</b></p>   In order to apply encryption with customer-provided keys (SSE-C) to the uploading object add these headers to the request: <ul> <li>`x-amz-server-side-encryption-customer-algorithm` = `AES256`</li> <li>`x-amz-server-side-encryption-customer-key` &mdash; the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data. You might use these commands to generate it: <ol><li>to create the file with a key: `openssl rand 32 -out my-key.key`</li><li>to get base64-encoded string: `openssl enc -base64 -in my-key.key`, the example of the output: `4ZRNYBCCvL0YZeqo3f2+9qDyIfnLdbg5S99R2XWr0aw=`.</li></ul></li> <li>`x-amz-server-side-encryption-customer-key-MD5` &mdash; the base64-encoded 128-bit MD5 digest of the encryption key. Generate it with the following command: <br />`echo my-key.key | openssl dgst -md5 -binary | openssl enc -base64`.<br /> The example of the output: `bPU7G1zD2MlOi5gqnkRqZg==`.</li> </ul>  </p> <p><b>NOTE</b>:<br/> <ul> <li>The SSE-C encryption will override the SSE-S3 encryption if the last one was enabled as a default encryption for the bucket.</li> <li>In the response, IONOS Object Storage returns the encryption algorithm and MD5 of the encryption key that you specified when uploading the object. The ETag that is returned is not the MD5 of the object. </ul>   </p>"
							},
							"response": [
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Cache-Control",
												"value": "<string>",
												"description": " Can be used to specify caching behavior along the request/reply chain. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">Cache-Control</a>."
											},
											{
												"key": "Content-Disposition",
												"value": "<string>",
												"description": "Specifies presentational information for the object. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1\">Content-Disposition</a>."
											},
											{
												"key": "Content-Encoding",
												"value": "<string>",
												"description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\">Content-Encoding</a>."
											},
											{
												"key": "Content-Language",
												"value": "<string>",
												"description": "The language the content is in."
											},
											{
												"key": "Content-Length",
												"value": "<integer>",
												"description": "Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13\">Content-Length</a>."
											},
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "Expires",
												"value": "<dateTime>",
												"description": "The date and time at which the object is no longer cacheable. For more information, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21\">Expires</a>."
											},
											{
												"key": "x-amz-server-side-encryption",
												"value": "AES256",
												"description": "The server-side encryption algorithm used when storing this object in IONOS Object Storage (AES256)."
											},
											{
												"key": "x-amz-storage-class",
												"value": "STANDARD",
												"description": "The valid value is `STANDARD`."
											},
											{
												"key": "x-amz-website-redirect-location",
												"value": "<string>",
												"description": "<p>If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. IONOS Object Storage stores the value of this header in the object metadata.</p> <p>In the following example, the request header sets the redirect to an object (anotherPage.html) in the same bucket:</p> <p> `x-amz-website-redirect-location: /anotherPage.html` </p> <p>In the following example, the request header sets the object redirect to another website:</p> <p> `x-amz-website-redirect-location: http://www.example.com/` </p>"
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "AES256",
												"description": "Specifies the algorithm to use to when encrypting the object. The valid option is `AES256`."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the 256-bit, base64-encoded encryption key to use to encrypt and decrypt your data. For example, `4ZRNYBCCvL0YZeqo3f2+9qDyIfnLdbg5S99R2XWr0aw=`."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error. For example, `bPU7G1zD2MlOi5gqnkRqZg==`."
											},
											{
												"key": "x-amz-server-side-encryption-context",
												"value": "<string>",
												"description": "Specifies the IONOS Object Storage Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs."
											},
											{
												"key": "x-amz-request-payer",
												"value": "requester"
											},
											{
												"key": "x-amz-tagging",
												"value": "<string>",
												"description": "The tag-set for the object. The tag-set must be encoded as URL Query parameters. (For example, \"Key1=Value1\")"
											},
											{
												"key": "x-amz-object-lock-mode",
												"value": "GOVERNANCE",
												"description": "The Object Lock mode that you want to apply to this object."
											},
											{
												"key": "x-amz-object-lock-retain-until-date",
												"value": "<dateTime>",
												"description": "The date and time when you want this object's Object Lock to expire. Must be formatted as a timestamp parameter."
											},
											{
												"key": "x-amz-object-lock-legal-hold",
												"value": "ON",
												"description": "Specifies whether a legal hold will be applied to this object."
											},
											{
												"key": "Content-Type",
												"value": "text/plain"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Body\": \"<string>\",\n  \"x-amz-meta-\": {\n    \"deserunt2\": \"<string>\",\n    \"nonaf\": \"<string>\"\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/:Key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												":Key"
											],
											"variable": [
												{
													"key": "Bucket"
												},
												{
													"key": "Key"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										},
										{
											"key": "ETag",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										},
										{
											"key": "VersionId",
											"value": "<string>",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n  \"examples\": {\n    \"200\": {\n      \"summary\": \"Success\",\n      \"value\": \"HTTP/1.1 200 OK   \\nx-amz-request-id: 9a4f31b7-fed2-1fff-a148-3cecef3849fe\\ndate: Tue, 04 Apr 2023 19:36:53 GMT\\netag: \\\"4f8d2c12500d851ed55fc08df311e868\\\"\\nx-amz-server-side-encryption-customer-algorithm: AES256   \\nx-amz-server-side-encryption-customer-key-MD5: r4C1SZrweqvPoGPMtR6jTA==\\ncontent-length: 0\\n\"\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "DeleteObject",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-amz-mfa",
										"value": "<string>",
										"description": "The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA Delete enabled."
									},
									{
										"key": "x-amz-bypass-governance-retention",
										"value": "<boolean>",
										"description": "Indicates whether Object Lock should bypass Governance-mode restrictions to process this operation. To use this header, you must have the `PutBucketPublicAccessBlock` permission."
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket/:Key?versionId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										":Key"
									],
									"query": [
										{
											"key": "versionId",
											"value": "<string>",
											"description": "VersionId used to reference a specific version of the object."
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "Key",
											"value": "<string>",
											"description": "(Required) Key name of the object to delete."
										}
									]
								},
								"description": "<p> Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object. This operation is final - there is no way to recover a deleted object.  Data stored in IONOS Object Storage is erasure coded and distributed to multiple individual  storage devices in multiple data centers. When data is deleted, various mechanisms exist which prevent  recovery or reconstruction of the deleted objects. </p> <p> Deletion of an object undergoes various stages.  First, the metadata is marked to indicate the object is deleted, then, the data is removed. Eventually,  deleted metadata is overwritten and the deleted data blocks are overwritten  with new data in the course of normal operations. As soon as the metadata is marked deleted, it is not  possible to read an object remotely. </p>"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-amz-mfa",
												"value": "<string>",
												"description": "The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA Delete enabled."
											},
											{
												"key": "x-amz-bypass-governance-retention",
												"value": "<boolean>",
												"description": "Indicates whether Object Lock should bypass Governance-mode restrictions to process this operation. To use this header, you must have the `PutBucketPublicAccessBlock` permission."
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/:Key?versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												":Key"
											],
											"query": [
												{
													"key": "versionId",
													"value": "<string>",
													"description": "VersionId used to reference a specific version of the object."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												},
												{
													"key": "Key"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n</element>"
								}
							]
						}
					]
				},
				{
					"name": "{Key}?x-amz-copy-source",
					"item": [
						{
							"name": "CopyObject",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cache-Control",
										"value": "<string>",
										"description": "Specifies caching behavior along the request/reply chain."
									},
									{
										"key": "Content-Disposition",
										"value": "<string>",
										"description": "Specifies presentational information for the object."
									},
									{
										"key": "Content-Encoding",
										"value": "<string>",
										"description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field."
									},
									{
										"key": "Content-Language",
										"value": "<string>",
										"description": "The language the content is in."
									},
									{
										"key": "x-amz-copy-source",
										"value": "/D<>A&/7",
										"description": "(Required) <p>Specifies the source object for the copy operation."
									},
									{
										"key": "x-amz-copy-source-if-match",
										"value": "<string>",
										"description": "Copies the object if its entity tag (ETag) matches the specified tag."
									},
									{
										"key": "x-amz-copy-source-if-modified-since",
										"value": "<dateTime>",
										"description": "Copies the object if it has been modified since the specified time."
									},
									{
										"key": "x-amz-copy-source-if-none-match",
										"value": "<string>",
										"description": "Copies the object if its entity tag (ETag) is different than the specified ETag."
									},
									{
										"key": "x-amz-copy-source-if-unmodified-since",
										"value": "<dateTime>",
										"description": "Copies the object if it hasn't been modified since the specified time."
									},
									{
										"key": "Expires",
										"value": "<dateTime>",
										"description": "The date and time at which the object is no longer cacheable."
									},
									{
										"key": "x-amz-metadata-directive",
										"value": "COPY",
										"description": "Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request."
									},
									{
										"key": "x-amz-tagging-directive",
										"value": "COPY",
										"description": "Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request."
									},
									{
										"key": "x-amz-server-side-encryption",
										"value": "AES256",
										"description": "The server-side encryption algorithm used when storing this object in IONOS Object Storage (AES256)."
									},
									{
										"key": "x-amz-storage-class",
										"value": "STANDARD",
										"description": "IONOS Object Storage uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability."
									},
									{
										"key": "x-amz-website-redirect-location",
										"value": "<string>",
										"description": "If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. IONOS Object Storage stores the value of this header in the object metadata."
									},
									{
										"key": "x-amz-server-side-encryption-customer-algorithm",
										"value": "<string>",
										"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key",
										"value": "<string>",
										"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use in encrypting data. This value is used to store the object and then it is discarded; IONOS Object Storage does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
									},
									{
										"key": "x-amz-server-side-encryption-customer-key-MD5",
										"value": "<string>",
										"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
									},
									{
										"key": "x-amz-copy-source-server-side-encryption-customer-algorithm",
										"value": "<string>",
										"description": "Specifies the algorithm to use when decrypting the source object (AES256)."
									},
									{
										"key": "x-amz-copy-source-server-side-encryption-customer-key",
										"value": "<string>",
										"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created."
									},
									{
										"key": "x-amz-copy-source-server-side-encryption-customer-key-MD5",
										"value": "<string>",
										"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
									},
									{
										"key": "x-amz-tagging",
										"value": "<string>",
										"description": "The tag-set for the object destination object this value must be used in conjunction with the `TaggingDirective`. The tag-set must be encoded as URL Query parameters."
									},
									{
										"key": "x-amz-object-lock-mode",
										"value": "GOVERNANCE",
										"description": "The Object Lock mode that you want to apply to the copied object."
									},
									{
										"key": "x-amz-object-lock-retain-until-date",
										"value": "<dateTime>",
										"description": "The date and time when you want the copied object's Object Lock to expire."
									},
									{
										"key": "x-amz-object-lock-legal-hold",
										"value": "ON",
										"description": "Specifies whether you want to apply a Legal Hold to the copied object."
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <x-amz-meta->\n  </x-amz-meta->\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?x-amz-copy-source",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "x-amz-copy-source",
											"value": null
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "<p>Creates a copy of an object that is already stored in IONOS Object Storage.</p> <note> <p>You can store individual objects of up to 5 TB in IONOS Object Storage. You create a copy of your object up to 5 GB in size in a single atomic operation using this API. However, to copy an object greater than 5 GB, you must use the multipart upload Upload Part - Copy API. </note> <p>All copy requests must be authenticated. Additionally, you must have <i>read</i> access to the source object and <i>write</i> access to the destination bucket. Both the Region that you want to copy the object from and the Region that you want to copy the object to must be enabled for your account.</p>"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Cache-Control",
												"value": "<string>",
												"description": "Specifies caching behavior along the request/reply chain."
											},
											{
												"key": "Content-Disposition",
												"value": "<string>",
												"description": "Specifies presentational information for the object."
											},
											{
												"key": "Content-Encoding",
												"value": "<string>",
												"description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field."
											},
											{
												"key": "Content-Language",
												"value": "<string>",
												"description": "The language the content is in."
											},
											{
												"key": "x-amz-copy-source",
												"value": "/D<>A&/7",
												"description": "(Required) <p>Specifies the source object for the copy operation."
											},
											{
												"key": "x-amz-copy-source-if-match",
												"value": "<string>",
												"description": "Copies the object if its entity tag (ETag) matches the specified tag."
											},
											{
												"key": "x-amz-copy-source-if-modified-since",
												"value": "<dateTime>",
												"description": "Copies the object if it has been modified since the specified time."
											},
											{
												"key": "x-amz-copy-source-if-none-match",
												"value": "<string>",
												"description": "Copies the object if its entity tag (ETag) is different than the specified ETag."
											},
											{
												"key": "x-amz-copy-source-if-unmodified-since",
												"value": "<dateTime>",
												"description": "Copies the object if it hasn't been modified since the specified time."
											},
											{
												"key": "Expires",
												"value": "<dateTime>",
												"description": "The date and time at which the object is no longer cacheable."
											},
											{
												"key": "x-amz-metadata-directive",
												"value": "COPY",
												"description": "Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request."
											},
											{
												"key": "x-amz-tagging-directive",
												"value": "COPY",
												"description": "Specifies whether the object tag-set are copied from the source object or replaced with tag-set provided in the request."
											},
											{
												"key": "x-amz-server-side-encryption",
												"value": "AES256",
												"description": "The server-side encryption algorithm used when storing this object in IONOS Object Storage (AES256)."
											},
											{
												"key": "x-amz-storage-class",
												"value": "STANDARD",
												"description": "IONOS Object Storage uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability."
											},
											{
												"key": "x-amz-website-redirect-location",
												"value": "<string>",
												"description": "If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. IONOS Object Storage stores the value of this header in the object metadata."
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "<string>",
												"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use in encrypting data. This value is used to store the object and then it is discarded; IONOS Object Storage does not store the encryption key. The key must be appropriate for use with the algorithm specified in the `x-amz-server-side-encryption-customer-algorithm` header."
											},
											{
												"key": "x-amz-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
											},
											{
												"key": "x-amz-copy-source-server-side-encryption-customer-algorithm",
												"value": "<string>",
												"description": "Specifies the algorithm to use when decrypting the source object (AES256)."
											},
											{
												"key": "x-amz-copy-source-server-side-encryption-customer-key",
												"value": "<string>",
												"description": "Specifies the customer-provided encryption key for IONOS Object Storage to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created."
											},
											{
												"key": "x-amz-copy-source-server-side-encryption-customer-key-MD5",
												"value": "<string>",
												"description": "Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. IONOS Object Storage uses this header for a message integrity check to ensure that the encryption key was transmitted without error."
											},
											{
												"key": "x-amz-tagging",
												"value": "<string>",
												"description": "The tag-set for the object destination object this value must be used in conjunction with the `TaggingDirective`. The tag-set must be encoded as URL Query parameters."
											},
											{
												"key": "x-amz-object-lock-mode",
												"value": "GOVERNANCE",
												"description": "The Object Lock mode that you want to apply to the copied object."
											},
											{
												"key": "x-amz-object-lock-retain-until-date",
												"value": "<dateTime>",
												"description": "The date and time when you want the copied object's Object Lock to expire."
											},
											{
												"key": "x-amz-object-lock-legal-hold",
												"value": "ON",
												"description": "Specifies whether you want to apply a Legal Hold to the copied object."
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <x-amz-meta->\n  </x-amz-meta->\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CopyObjectResult>\n    <ETag>(string)</ETag>\n    <LastModified>(string)</LastModified>\n  </CopyObjectResult>\n</element>"
								}
							]
						}
					]
				},
				{
					"name": "{Key}?tagging",
					"item": [
						{
							"name": "GetObjectTagging",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?tagging&versionId=<string>&tagging=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "tagging",
											"value": null
										},
										{
											"key": "versionId",
											"value": "<string>",
											"description": "The versionId of the object for which to get the tagging information."
										},
										{
											"key": "tagging",
											"value": "true",
											"description": "(Required) "
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "<p>Returns the tag-set of an object. You send the GET request against the tagging subresource associated with the object.</p> <p>To use this operation, you must have permission to perform the `GetObjectTagging` operation. By default, the GET operation returns information about current version of an object. For a versioned bucket, you can have multiple versions of an object in your bucket. To retrieve tags of any other version, use the versionId query parameter. You also need permission for the `GetObjectVersionTagging` operation.</p> <p> By default, the bucket owner has this permission and can grant this permission to others.</p>"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?versionId=<string>&tagging=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The versionId of the object for which to get the tagging information."
												},
												{
													"key": "tagging",
													"value": "true",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <TagSet>\n    <Key>(string)</Key>\n    <Value>(string)</Value>\n  </TagSet>\n  <TagSet>\n    <Key>(string)</Key>\n    <Value>(string)</Value>\n  </TagSet>\n</element>"
								}
							]
						},
						{
							"name": "PutObjectTagging",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Tagging>\n    <TagSet>\n      <Key>(string)</Key>\n      <Value>(string)</Value>\n    </TagSet>\n    <TagSet>\n      <Key>(string)</Key>\n      <Value>(string)</Value>\n    </TagSet>\n  </Tagging>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?tagging&versionId=<string>&tagging=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "tagging",
											"value": null
										},
										{
											"key": "versionId",
											"value": "<string>",
											"description": "The versionId of the object that the tag-set will be added to."
										},
										{
											"key": "tagging",
											"value": "true",
											"description": "(Required) "
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "<p>Sets the supplied tag-set to an object that already exists in a bucket.</p> <p>A tag is a key-value pair. You can associate tags with an object by sending a PUT request against the tagging subresource that is associated with the object. You can retrieve tags by sending a GET request.</p> <p>Note that IONOS Object Storage limits the maximum number of tags to 10 tags per object.</p> <p>To use this operation, you must have permission to perform the `PutObjectTagging` operation. By default, the bucket owner has this permission and can grant this permission to others.</p> <p>To put tags of any other version, use the `versionId` query parameter. You also need permission for the `PutObjectVersionTagging` operation.</p> <p class=\"title\"> <b>Special Errors</b> </p> <ul> <li> <ul> <li> <p> <i>Code: InvalidTagError </i> </p> </li> <li> <p> <i>Cause: The tag provided was not a valid tag. This error can occur if the tag did not pass input validation.</i> </p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code: MalformedXMLError </i> </p> </li> <li> <p> <i>Cause: The XML provided does not match the schema.</i> </p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code: OperationAbortedError </i> </p> </li> <li> <p> <i>Cause: A conflicting conditional operation is currently in progress against this resource. Please try again.</i> </p> </li> </ul> </li> <li> <ul> <li> <p> <i>Code: InternalError</i> </p> </li> <li> <p> <i>Cause: The service was unable to apply the provided tag to the object.</i> </p> </li> </ul> </li> </ul>"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Tagging>\n    <TagSet>\n      <Key>(string)</Key>\n      <Value>(string)</Value>\n    </TagSet>\n    <TagSet>\n      <Key>(string)</Key>\n      <Value>(string)</Value>\n    </TagSet>\n  </Tagging>\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?versionId=<string>&tagging=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The versionId of the object that the tag-set will be added to."
												},
												{
													"key": "tagging",
													"value": "true",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n</element>"
								}
							]
						},
						{
							"name": "DeleteObjectTagging",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?tagging&versionId=<string>&tagging=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "tagging",
											"value": null
										},
										{
											"key": "versionId",
											"value": "<string>",
											"description": "The versionId of the object that the tag-set will be removed from."
										},
										{
											"key": "tagging",
											"value": "true",
											"description": "(Required) "
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "<p>Removes the entire tag set from the specified object.</p>  <p>To use this operation, you must have permission to perform the `DeleteObjectTagging` operation.</p> <p>To delete tags of a specific object version, add the `versionId` query parameter in the request. You will need permission for the `DeleteObjectVersionTagging` operation.</p>"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?versionId=<string>&tagging=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The versionId of the object that the tag-set will be removed from."
												},
												{
													"key": "tagging",
													"value": "true",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n</element>"
								}
							]
						}
					]
				},
				{
					"name": "{Key}?retention",
					"item": [
						{
							"name": "GetObjectRetention",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?retention&retention=true&versionId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "retention",
											"value": null
										},
										{
											"key": "retention",
											"value": "true",
											"description": "(Required) "
										},
										{
											"key": "versionId",
											"value": "<string>",
											"description": "The version ID of the object whose retention settings you want to retrieve."
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "Retrieves an object's retention configuration.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:GetObjectRetention` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n"
							},
							"response": [
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?retention=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "retention",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object whose retention settings you want to retrieve."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Retention>\n    <Mode>(string)</Mode>\n    <RetainUntilDate>(string)</RetainUntilDate>\n  </Retention>\n</element>"
								},
								{
									"name": "InvalidRequest",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?retention=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "retention",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object whose retention settings you want to retrieve."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								},
								{
									"name": "AccessDenied",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?retention=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "retention",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object whose retention settings you want to retrieve."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								},
								{
									"name": "NoSuchBucket or NoSuchKey",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?retention=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "retention",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object whose retention settings you want to retrieve."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								}
							]
						},
						{
							"name": "PutObjectRetention",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-amz-bypass-governance-retention",
										"value": "false",
										"description": "Indicates whether this operation should bypass Governance mode's restrictions."
									},
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Retention>\n    <Mode>(string)</Mode>\n    <RetainUntilDate>(string)</RetainUntilDate>\n  </Retention>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?retention&retention=true&versionId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "retention",
											"value": null
										},
										{
											"key": "retention",
											"value": "true",
											"description": "(Required) "
										},
										{
											"key": "versionId",
											"value": "<string>",
											"description": "The version ID of the object to which you want to apply the Object Retention configuration."
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "Places an Object Retention configuration on an object.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:PutObjectRetention` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\nBypassing a Governance Retention configuration also requires the `s3:BypassGovernanceRetention` permission.\n"
							},
							"response": [
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "x-amz-bypass-governance-retention",
												"value": "false",
												"description": "Indicates whether this operation should bypass Governance mode's restrictions."
											},
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Retention>\n    <Mode>(string)</Mode>\n    <RetainUntilDate>(string)</RetainUntilDate>\n  </Retention>\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?retention=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "retention",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object to which you want to apply the Object Retention configuration."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "InvalidRequest or MalformedXML",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "x-amz-bypass-governance-retention",
												"value": "false",
												"description": "Indicates whether this operation should bypass Governance mode's restrictions."
											},
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Retention>\n    <Mode>(string)</Mode>\n    <RetainUntilDate>(string)</RetainUntilDate>\n  </Retention>\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?retention=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "retention",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object to which you want to apply the Object Retention configuration."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								},
								{
									"name": "AccessDenied or ObjectLockAccessDenied",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "x-amz-bypass-governance-retention",
												"value": "false",
												"description": "Indicates whether this operation should bypass Governance mode's restrictions."
											},
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Retention>\n    <Mode>(string)</Mode>\n    <RetainUntilDate>(string)</RetainUntilDate>\n  </Retention>\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?retention=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "retention",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object to which you want to apply the Object Retention configuration."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								},
								{
									"name": "NoSuchBucket or NoSuchKey",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "x-amz-bypass-governance-retention",
												"value": "false",
												"description": "Indicates whether this operation should bypass Governance mode's restrictions."
											},
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Retention>\n    <Mode>(string)</Mode>\n    <RetainUntilDate>(string)</RetainUntilDate>\n  </Retention>\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?retention=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "retention",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object to which you want to apply the Object Retention configuration."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								}
							]
						}
					]
				},
				{
					"name": "{Key}?legal-hold",
					"item": [
						{
							"name": "GetObjectLegalHold",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?legal-hold&legal-hold=true&versionId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "legal-hold",
											"value": null
										},
										{
											"key": "legal-hold",
											"value": "true",
											"description": "(Required) "
										},
										{
											"key": "versionId",
											"value": "<string>",
											"description": "The version ID of the object whose Legal Hold status you want to retrieve."
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "Gets an object's current Legal Hold status.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:GetObjectLegalHold` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n"
							},
							"response": [
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?legal-hold=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "legal-hold",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object whose Legal Hold status you want to retrieve."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<LegalHold xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Status>(string)</Status>\n</LegalHold>"
								},
								{
									"name": "InvalidRequest",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?legal-hold=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "legal-hold",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object whose Legal Hold status you want to retrieve."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								},
								{
									"name": "AccessDenied",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?legal-hold=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "legal-hold",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object whose Legal Hold status you want to retrieve."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								},
								{
									"name": "NoSuchBucket, NoSuchKey or NoSuchObjectLockConfiguration",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?legal-hold=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "legal-hold",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object whose Legal Hold status you want to retrieve."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								}
							]
						},
						{
							"name": "PutObjectLegalHold",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <LegalHold>\n    <LegalHold xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n      <Status>(string)</Status>\n    </LegalHold>\n  </LegalHold>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?legal-hold&legal-hold=true&versionId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "legal-hold",
											"value": null
										},
										{
											"key": "legal-hold",
											"value": "true",
											"description": "(Required) "
										},
										{
											"key": "versionId",
											"value": "<string>",
											"description": "The version ID of the object on which you want to place a Legal Hold."
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "Applies a Legal Hold configuration to the specified object.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:PutObjectLegalHold` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n"
							},
							"response": [
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <LegalHold>\n    <LegalHold xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n      <Status>(string)</Status>\n    </LegalHold>\n  </LegalHold>\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?legal-hold=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "legal-hold",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object on which you want to place a Legal Hold."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "InvalidRequest or MalformedXML",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <LegalHold>\n    <LegalHold xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n      <Status>(string)</Status>\n    </LegalHold>\n  </LegalHold>\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?legal-hold=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "legal-hold",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object on which you want to place a Legal Hold."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								},
								{
									"name": "AccessDenied",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <LegalHold>\n    <LegalHold xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n      <Status>(string)</Status>\n    </LegalHold>\n  </LegalHold>\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?legal-hold=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "legal-hold",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object on which you want to place a Legal Hold."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								},
								{
									"name": "NoSuchBucket or NoSuchKey",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-MD5",
												"value": "<string>"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <LegalHold>\n    <LegalHold xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n      <Status>(string)</Status>\n    </LegalHold>\n  </LegalHold>\n</element>",
											"options": {
												"raw": {
													"headerFamily": "xml",
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?legal-hold=true&versionId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "legal-hold",
													"value": "true",
													"description": "(Required) "
												},
												{
													"key": "versionId",
													"value": "<string>",
													"description": "The version ID of the object on which you want to place a Legal Hold."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
								}
							]
						}
					]
				},
				{
					"name": "{Key}?x-amz-copy-source&partNumber&uploadId",
					"item": [
						{
							"name": "UploadPartCopy",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-amz-copy-source",
										"value": "/D<>A&/7",
										"description": "(Required) <p>Specifies the source object for the copy operation. </p>"
									},
									{
										"key": "x-amz-copy-source-if-match",
										"value": "<string>",
										"description": "Copies the object if its entity tag (ETag) matches the specified tag."
									},
									{
										"key": "x-amz-copy-source-if-modified-since",
										"value": "<dateTime>",
										"description": "Copies the object if it has been modified since the specified time."
									},
									{
										"key": "x-amz-copy-source-if-none-match",
										"value": "<string>",
										"description": "Copies the object if its entity tag (ETag) is different than the specified ETag."
									},
									{
										"key": "x-amz-copy-source-if-unmodified-since",
										"value": "<dateTime>",
										"description": "Copies the object if it hasn't been modified since the specified time."
									},
									{
										"key": "x-amz-copy-source-range",
										"value": "<string>",
										"description": "The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You can copy a range only if the source object is greater than 5 MB."
									},
									{
										"key": "x-amz-server-side-encryption-customer-algorithm",
										"value": "AES256",
										"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
									},
									{
										"key": "Accept",
										"value": "application/xml"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket/{{Key}}?x-amz-copy-source&partNumber&uploadId&partNumber=<integer>&uploadId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket",
										"{{Key}}"
									],
									"query": [
										{
											"key": "x-amz-copy-source",
											"value": null
										},
										{
											"key": "partNumber",
											"value": null
										},
										{
											"key": "uploadId",
											"value": null
										},
										{
											"key": "partNumber",
											"value": "<integer>",
											"description": "(Required) Part number of part being copied. This is a positive integer between 1 and 10,000."
										},
										{
											"key": "uploadId",
											"value": "<string>",
											"description": "(Required) Upload ID identifying the multipart upload whose part is being copied."
										}
									],
									"variable": [
										{
											"key": "Bucket",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "<p>Uploads a part by copying data from an existing object as data source. You specify the data source by adding the request header `x-amz-copy-source` in your request and a byte range by adding the request header `x-amz-copy-source-range` in your request. </p> <p>The minimum allowable part size for a multipart upload is 5 MB.</p> <note> <p>Instead of using an existing object as part data, you might use the `UploadPart` operation and provide data in your request.</p> </note> <p>You must initiate a multipart upload before you can upload any part. In response to your initiate request. IONOS Object Storage returns a unique identifier, the upload ID, that you must include in your upload part request.</p>"
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "x-amz-copy-source",
												"value": "/D<>A&/7",
												"description": "(Required) <p>Specifies the source object for the copy operation. </p>"
											},
											{
												"key": "x-amz-copy-source-if-match",
												"value": "<string>",
												"description": "Copies the object if its entity tag (ETag) matches the specified tag."
											},
											{
												"key": "x-amz-copy-source-if-modified-since",
												"value": "<dateTime>",
												"description": "Copies the object if it has been modified since the specified time."
											},
											{
												"key": "x-amz-copy-source-if-none-match",
												"value": "<string>",
												"description": "Copies the object if its entity tag (ETag) is different than the specified ETag."
											},
											{
												"key": "x-amz-copy-source-if-unmodified-since",
												"value": "<dateTime>",
												"description": "Copies the object if it hasn't been modified since the specified time."
											},
											{
												"key": "x-amz-copy-source-range",
												"value": "<string>",
												"description": "The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You can copy a range only if the source object is greater than 5 MB."
											},
											{
												"key": "x-amz-server-side-encryption-customer-algorithm",
												"value": "AES256",
												"description": "Specifies the algorithm to use to when encrypting the object (AES256)."
											},
											{
												"key": "Accept",
												"value": "application/xml"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:Bucket/{{Key}}?partNumber=<integer>&uploadId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":Bucket",
												"{{Key}}"
											],
											"query": [
												{
													"key": "partNumber",
													"value": "<integer>",
													"description": "(Required) Part number of part being copied. This is a positive integer between 1 and 10,000."
												},
												{
													"key": "uploadId",
													"value": "<string>",
													"description": "(Required) Upload ID identifying the multipart upload whose part is being copied."
												}
											],
											"variable": [
												{
													"key": "Bucket"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "xml",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/xml"
										},
										{
											"key": "x-amz-request-id",
											"value": "",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CopyPartResult>\n    <ETag>(string)</ETag>\n    <LastModified>(string)</LastModified>\n  </CopyPartResult>\n</element>"
								}
							]
						}
					]
				},
				{
					"name": "CreateBucket",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-amz-bucket-object-lock-enabled",
								"value": "false",
								"description": "Specifies whether you want Object Lock enabled for the new bucket. After bucket creation, you must apply the [Object Lock configuration](#tag/Object-Lock/operation/PutObjectLockConfiguration)."
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CreateBucketConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n    <LocationConstraint>(string)</LocationConstraint>\n  </CreateBucketConfiguration>\n</element>",
							"options": {
								"raw": {
									"headerFamily": "xml",
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/:Bucket",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":Bucket"
							],
							"variable": [
								{
									"key": "Bucket",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						},
						"description": "Creates a new Object storage bucket. \n\nTo create a bucket, you must register with IONOS Object Storage and have a valid Access Key ID to\nauthenticate requests. \n\nNot every string is an acceptable bucket name. For information about bucket\nnaming restrictions, see [Bucket naming rules](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets#naming-conventions).\n\nBuckets are created in the location specified in the endpoint used to make the request.\nOnce a bucket is created, it can be accessed at that location. Any requests \ntargeting an existing bucket using an endpoint with an incorrect location will result in a `404 NoSuchkey`.\n\n### Permissions\nAny user of the contract is allowed to create a bucket. But further operations with the bucket\nmust be allowed by [Bucket Policy](#tag/Policy/operation/PutBucketPolicy) which must be set by the contract owner or an administrator.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "x-amz-bucket-object-lock-enabled",
										"value": "false",
										"description": "Specifies whether you want Object Lock enabled for the new bucket. After bucket creation, you must apply the [Object Lock configuration](#tag/Object-Lock/operation/PutObjectLockConfiguration)."
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CreateBucketConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n    <LocationConstraint>(string)</LocationConstraint>\n  </CreateBucketConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "InvalidArgument or InvalidLocationConstraint",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "x-amz-bucket-object-lock-enabled",
										"value": "false",
										"description": "Specifies whether you want Object Lock enabled for the new bucket. After bucket creation, you must apply the [Object Lock configuration](#tag/Object-Lock/operation/PutObjectLockConfiguration)."
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CreateBucketConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n    <LocationConstraint>(string)</LocationConstraint>\n  </CreateBucketConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "x-amz-bucket-object-lock-enabled",
										"value": "false",
										"description": "Specifies whether you want Object Lock enabled for the new bucket. After bucket creation, you must apply the [Object Lock configuration](#tag/Object-Lock/operation/PutObjectLockConfiguration)."
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CreateBucketConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n    <LocationConstraint>(string)</LocationConstraint>\n  </CreateBucketConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "BucketAlreadyExists",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "x-amz-bucket-object-lock-enabled",
										"value": "false",
										"description": "Specifies whether you want Object Lock enabled for the new bucket. After bucket creation, you must apply the [Object Lock configuration](#tag/Object-Lock/operation/PutObjectLockConfiguration)."
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CreateBucketConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n    <LocationConstraint>(string)</LocationConstraint>\n  </CreateBucketConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "HeadBucket",
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:Bucket",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":Bucket"
							],
							"variable": [
								{
									"key": "Bucket",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						},
						"description": "Retrieves metadata and verifies the existence of a specific bucket. This operation checks for the presence\nof the specified bucket without returning the actual content of the bucket.\n\nBucket names are globally unique across all users of the service. If the bucket exists and the requester\nhas permission to access it, the server returns a `200 OK` HTTP status code with no accompanying response body. \nIf the bucket does not exist or if the requester does not have permission to access it, the server returns a relevant error code:\n- `403 Forbidden`: The requester does not have permission to access the bucket.\n- `404 Not Found`: The bucket does not exist.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:ListBucket` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "AccessDenied or Forbidden",
							"originalRequest": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "HEAD",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "DeleteBucket",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:Bucket",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":Bucket"
							],
							"variable": [
								{
									"key": "Bucket",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						},
						"description": "Deletes the bucket. All objects (including all object versions and\ndelete markers) in the bucket must be deleted before the bucket itself\ncan be deleted.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:DeleteBucket` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "AccessDenied or Forbidden",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "ListObjects",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-amz-request-payer",
								"value": "requester",
								"description": "Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests."
							},
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:Bucket?delimiter=<string>&encoding-type=url&marker=<string>&max-keys=<integer>&prefix=<string>&MaxKeys=<string>&Marker=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":Bucket"
							],
							"query": [
								{
									"key": "delimiter",
									"value": "<string>",
									"description": "A delimiter is a character you use to group keys."
								},
								{
									"key": "encoding-type",
									"value": "url"
								},
								{
									"key": "marker",
									"value": "<string>",
									"description": "Marker is where you want IONOS Object Storage to start listing from. IONOS Object Storage starts listing after this specified key. Marker can be any key in the bucket."
								},
								{
									"key": "max-keys",
									"value": "<integer>",
									"description": "Sets the maximum number of keys returned in the response. By default the operation returns up to 1,000 key names. The response might contain fewer keys but will never contain more. "
								},
								{
									"key": "prefix",
									"value": "<string>",
									"description": "Limits the response to keys that begin with the specified prefix."
								},
								{
									"key": "MaxKeys",
									"value": "<string>",
									"description": "Pagination limit"
								},
								{
									"key": "Marker",
									"value": "<string>",
									"description": "Pagination token"
								}
							],
							"variable": [
								{
									"key": "Bucket",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>Returns some or all (up to 1,000) of the objects in a bucket. You can\nuse the request parameters as selection criteria to return a subset of\nthe objects in a bucket. A 200 OK response can contain valid or invalid\nXML. Be sure to design your application to parse the contents of the\nresponse and handle it appropriately.</p>\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:ListBucket` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-amz-request-payer",
										"value": "requester",
										"description": "Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests."
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket?delimiter=<string>&encoding-type=url&marker=<string>&max-keys=<integer>&prefix=<string>&MaxKeys=<string>&Marker=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"query": [
										{
											"key": "delimiter",
											"value": "<string>",
											"description": "A delimiter is a character you use to group keys."
										},
										{
											"key": "encoding-type",
											"value": "url"
										},
										{
											"key": "marker",
											"value": "<string>",
											"description": "Marker is where you want IONOS Object Storage to start listing from. IONOS Object Storage starts listing after this specified key. Marker can be any key in the bucket."
										},
										{
											"key": "max-keys",
											"value": "<integer>",
											"description": "Sets the maximum number of keys returned in the response. By default the operation returns up to 1,000 key names. The response might contain fewer keys but will never contain more. "
										},
										{
											"key": "prefix",
											"value": "<string>",
											"description": "Limits the response to keys that begin with the specified prefix."
										},
										{
											"key": "MaxKeys",
											"value": "<string>",
											"description": "Pagination limit"
										},
										{
											"key": "Marker",
											"value": "<string>",
											"description": "Pagination token"
										}
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <IsTruncated>(boolean)</IsTruncated>\n  <Marker>(string)</Marker>\n  <NextMarker>(string)</NextMarker>\n  <Contents>\n    <Key>(string)</Key>\n    <LastModified>(string)</LastModified>\n    <StorageClass>(string)</StorageClass>\n    <Size>(integer)</Size>\n    <ETag>(string)</ETag>\n    <Owner>\n      <ID>(integer)</ID>\n      <DisplayName>(string)</DisplayName>\n    </Owner>\n  </Contents>\n  <Contents>\n    <Key>(string)</Key>\n    <LastModified>(string)</LastModified>\n    <StorageClass>(string)</StorageClass>\n    <Size>(integer)</Size>\n    <ETag>(string)</ETag>\n    <Owner>\n      <ID>(integer)</ID>\n      <DisplayName>(string)</DisplayName>\n    </Owner>\n  </Contents>\n  <Name>(string)</Name>\n  <Prefix>(string)</Prefix>\n  <Delimiter>(string)</Delimiter>\n  <MaxKeys>(integer)</MaxKeys>\n  <CommonPrefixes>\n    <Prefix>(string)</Prefix>\n  </CommonPrefixes>\n  <CommonPrefixes>\n    <Prefix>(string)</Prefix>\n  </CommonPrefixes>\n  <EncodingType>(string)</EncodingType>\n</element>"
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-amz-request-payer",
										"value": "requester",
										"description": "Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests."
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket?delimiter=<string>&encoding-type=url&marker=<string>&max-keys=<integer>&prefix=<string>&MaxKeys=<string>&Marker=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"query": [
										{
											"key": "delimiter",
											"value": "<string>",
											"description": "A delimiter is a character you use to group keys."
										},
										{
											"key": "encoding-type",
											"value": "url"
										},
										{
											"key": "marker",
											"value": "<string>",
											"description": "Marker is where you want IONOS Object Storage to start listing from. IONOS Object Storage starts listing after this specified key. Marker can be any key in the bucket."
										},
										{
											"key": "max-keys",
											"value": "<integer>",
											"description": "Sets the maximum number of keys returned in the response. By default the operation returns up to 1,000 key names. The response might contain fewer keys but will never contain more. "
										},
										{
											"key": "prefix",
											"value": "<string>",
											"description": "Limits the response to keys that begin with the specified prefix."
										},
										{
											"key": "MaxKeys",
											"value": "<string>",
											"description": "Pagination limit"
										},
										{
											"key": "Marker",
											"value": "<string>",
											"description": "Pagination token"
										}
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-amz-request-payer",
										"value": "requester",
										"description": "Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests."
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket?delimiter=<string>&encoding-type=url&marker=<string>&max-keys=<integer>&prefix=<string>&MaxKeys=<string>&Marker=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"query": [
										{
											"key": "delimiter",
											"value": "<string>",
											"description": "A delimiter is a character you use to group keys."
										},
										{
											"key": "encoding-type",
											"value": "url"
										},
										{
											"key": "marker",
											"value": "<string>",
											"description": "Marker is where you want IONOS Object Storage to start listing from. IONOS Object Storage starts listing after this specified key. Marker can be any key in the bucket."
										},
										{
											"key": "max-keys",
											"value": "<integer>",
											"description": "Sets the maximum number of keys returned in the response. By default the operation returns up to 1,000 key names. The response might contain fewer keys but will never contain more. "
										},
										{
											"key": "prefix",
											"value": "<string>",
											"description": "Limits the response to keys that begin with the specified prefix."
										},
										{
											"key": "MaxKeys",
											"value": "<string>",
											"description": "Pagination limit"
										},
										{
											"key": "Marker",
											"value": "<string>",
											"description": "Pagination token"
										}
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "OPTIONSObject",
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "Origin",
								"value": "<string>",
								"description": "(Required) <p>Identifies the origin of the cross-origin request to the IONOS Object Storage. </p>"
							},
							{
								"key": "Access-Control-Request-Method",
								"value": "<string>",
								"description": "(Required)  Identifies what HTTP method will be used in the actual request."
							},
							{
								"key": "Access-Control-Request-Headers",
								"value": "<string>",
								"description": "<p> A comma-delimited list of HTTP headers that will be sent in the actual request. </p> <p> For example, to put an object with server-side encryption, this preflight request  will determine if it can include the `x-amz-server-side-encryption` header with the request. </p>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:Bucket",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":Bucket"
							],
							"variable": [
								{
									"key": "Bucket",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>This API is used to issue a  preflight request to the IONOS Object Storage to determine if it can send an  actual request with the specific origin, HTTP method, and headers.</p>"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Origin",
										"value": "<string>",
										"description": "(Required) <p>Identifies the origin of the cross-origin request to the IONOS Object Storage. </p>"
									},
									{
										"key": "Access-Control-Request-Method",
										"value": "<string>",
										"description": "(Required)  Identifies what HTTP method will be used in the actual request."
									},
									{
										"key": "Access-Control-Request-Headers",
										"value": "<string>",
										"description": "<p> A comma-delimited list of HTTP headers that will be sent in the actual request. </p> <p> For example, to put an object with server-side encryption, this preflight request  will determine if it can include the `x-amz-server-side-encryption` header with the request. </p>"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Origin",
										"value": "<string>",
										"description": "(Required) <p>Identifies the origin of the cross-origin request to the IONOS Object Storage. </p>"
									},
									{
										"key": "Access-Control-Request-Method",
										"value": "<string>",
										"description": "(Required)  Identifies what HTTP method will be used in the actual request."
									},
									{
										"key": "Access-Control-Request-Headers",
										"value": "<string>",
										"description": "<p> A comma-delimited list of HTTP headers that will be sent in the actual request. </p> <p> For example, to put an object with server-side encryption, this preflight request  will determine if it can include the `x-amz-server-side-encryption` header with the request. </p>"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:Bucket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":Bucket"
									],
									"variable": [
										{
											"key": "Bucket"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?list-type=2",
			"item": [
				{
					"name": "ListObjectsV2",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?list-type=2&list-type=2&delimiter=<string>&encoding-type=url&max-keys=1000&prefix=<string>&continuation-token=<string>&fetch-owner=false&start-after=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "list-type",
									"value": "2"
								},
								{
									"key": "list-type",
									"value": "2",
									"description": "(Required) "
								},
								{
									"key": "delimiter",
									"value": "<string>",
									"description": "A delimiter is a character you use to group keys."
								},
								{
									"key": "encoding-type",
									"value": "url",
									"description": "Encoding type used by IONOS Object Storage to encode object keys in the response."
								},
								{
									"key": "max-keys",
									"value": "1000",
									"description": "Sets the maximum number of keys returned in the response. By default the operation returns up to 1000 key names. The response might contain fewer keys but will never contain more."
								},
								{
									"key": "prefix",
									"value": "<string>",
									"description": "Limits the response to keys that begin with the specified prefix."
								},
								{
									"key": "continuation-token",
									"value": "<string>",
									"description": "ContinuationToken indicates IONOS Object Storage that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key."
								},
								{
									"key": "fetch-owner",
									"value": "false",
									"description": "The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true."
								},
								{
									"key": "start-after",
									"value": "<string>",
									"description": "StartAfter is where you want to start listing from. IONOS Object Storage starts listing after this specified key. StartAfter can be any key in the bucket."
								}
							]
						},
						"description": "Retrieves a partial or complete list (with a maximum of 1000 objects per request) from a specified bucket.\nThe request parameters can serve as selection criteria to filter and return a subset of objects from the bucket.\n\nA `200 OK` response can contain either valid or invalid XML, so it's crucial to construct your application\nin such a way that it can correctly parse and handle the response content. In the resulting list, objects\nare organized in ascending order according to their key names.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:ListBucket` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n"
					},
					"response": [
						{
							"name": "Successul operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?list-type=2&delimiter=<string>&encoding-type=url&max-keys=1000&prefix=<string>&continuation-token=<string>&fetch-owner=false&start-after=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "list-type",
											"value": "2",
											"description": "(Required) "
										},
										{
											"key": "delimiter",
											"value": "<string>",
											"description": "A delimiter is a character you use to group keys."
										},
										{
											"key": "encoding-type",
											"value": "url",
											"description": "Encoding type used by IONOS Object Storage to encode object keys in the response."
										},
										{
											"key": "max-keys",
											"value": "1000",
											"description": "Sets the maximum number of keys returned in the response. By default the operation returns up to 1000 key names. The response might contain fewer keys but will never contain more."
										},
										{
											"key": "prefix",
											"value": "<string>",
											"description": "Limits the response to keys that begin with the specified prefix."
										},
										{
											"key": "continuation-token",
											"value": "<string>",
											"description": "ContinuationToken indicates IONOS Object Storage that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key."
										},
										{
											"key": "fetch-owner",
											"value": "false",
											"description": "The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true."
										},
										{
											"key": "start-after",
											"value": "<string>",
											"description": "StartAfter is where you want to start listing from. IONOS Object Storage starts listing after this specified key. StartAfter can be any key in the bucket."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ListBucketResult>\n  <ListBucketResult>\n    <Name>(string)</Name>\n    <Prefix>(string)</Prefix>\n    <MaxKeys>(integer)</MaxKeys>\n    <IsTruncated>(boolean)</IsTruncated>\n    <KeyCount>(integer)</KeyCount>\n    <Contents>\n      <Key>(string)</Key>\n      <LastModified>(string)</LastModified>\n      <StorageClass>(string)</StorageClass>\n      <Size>(integer)</Size>\n      <ETag>(string)</ETag>\n      <Owner>\n        <ID>(integer)</ID>\n        <DisplayName>(string)</DisplayName>\n      </Owner>\n    </Contents>\n    <Contents>\n      <Key>(string)</Key>\n      <LastModified>(string)</LastModified>\n      <StorageClass>(string)</StorageClass>\n      <Size>(integer)</Size>\n      <ETag>(string)</ETag>\n      <Owner>\n        <ID>(integer)</ID>\n        <DisplayName>(string)</DisplayName>\n      </Owner>\n    </Contents>\n    <Delimiter>(string)</Delimiter>\n    <CommonPrefixes>\n      <Prefix>(string)</Prefix>\n    </CommonPrefixes>\n    <CommonPrefixes>\n      <Prefix>(string)</Prefix>\n    </CommonPrefixes>\n    <EncodingType>(string)</EncodingType>\n    <ContinuationToken>(string)</ContinuationToken>\n    <NextContinuationToken>(string)</NextContinuationToken>\n    <StartAfter>(string)</StartAfter>\n  </ListBucketResult>\n</ListBucketResult>"
						},
						{
							"name": "AccessDenied or Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?list-type=2&delimiter=<string>&encoding-type=url&max-keys=1000&prefix=<string>&continuation-token=<string>&fetch-owner=false&start-after=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "list-type",
											"value": "2",
											"description": "(Required) "
										},
										{
											"key": "delimiter",
											"value": "<string>",
											"description": "A delimiter is a character you use to group keys."
										},
										{
											"key": "encoding-type",
											"value": "url",
											"description": "Encoding type used by IONOS Object Storage to encode object keys in the response."
										},
										{
											"key": "max-keys",
											"value": "1000",
											"description": "Sets the maximum number of keys returned in the response. By default the operation returns up to 1000 key names. The response might contain fewer keys but will never contain more."
										},
										{
											"key": "prefix",
											"value": "<string>",
											"description": "Limits the response to keys that begin with the specified prefix."
										},
										{
											"key": "continuation-token",
											"value": "<string>",
											"description": "ContinuationToken indicates IONOS Object Storage that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key."
										},
										{
											"key": "fetch-owner",
											"value": "false",
											"description": "The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true."
										},
										{
											"key": "start-after",
											"value": "<string>",
											"description": "StartAfter is where you want to start listing from. IONOS Object Storage starts listing after this specified key. StartAfter can be any key in the bucket."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?list-type=2&delimiter=<string>&encoding-type=url&max-keys=1000&prefix=<string>&continuation-token=<string>&fetch-owner=false&start-after=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "list-type",
											"value": "2",
											"description": "(Required) "
										},
										{
											"key": "delimiter",
											"value": "<string>",
											"description": "A delimiter is a character you use to group keys."
										},
										{
											"key": "encoding-type",
											"value": "url",
											"description": "Encoding type used by IONOS Object Storage to encode object keys in the response."
										},
										{
											"key": "max-keys",
											"value": "1000",
											"description": "Sets the maximum number of keys returned in the response. By default the operation returns up to 1000 key names. The response might contain fewer keys but will never contain more."
										},
										{
											"key": "prefix",
											"value": "<string>",
											"description": "Limits the response to keys that begin with the specified prefix."
										},
										{
											"key": "continuation-token",
											"value": "<string>",
											"description": "ContinuationToken indicates IONOS Object Storage that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key."
										},
										{
											"key": "fetch-owner",
											"value": "false",
											"description": "The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true."
										},
										{
											"key": "start-after",
											"value": "<string>",
											"description": "StartAfter is where you want to start listing from. IONOS Object Storage starts listing after this specified key. StartAfter can be any key in the bucket."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?cors",
			"item": [
				{
					"name": "GetBucketCors",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?cors&cors=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "cors",
									"value": null
								},
								{
									"key": "cors",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Returns the cors configuration information set for the bucket.\nTo use this operation, you must have permission to perform the GetBucketCORS operation. By default, the bucket owner has this permission and can grant it to others.\n#### S3 API Compatibility - The `x-amz-expected-bucket-owner` header isn't supported."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?cors=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "cors",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CORSRules>\n    <ID>(integer)</ID>\n    <AllowedHeaders>(string)</AllowedHeaders>\n    <AllowedHeaders>(string)</AllowedHeaders>\n    <AllowedMethod>(string)</AllowedMethod>\n    <AllowedMethod>(string)</AllowedMethod>\n    <AllowedOrigin>(string)</AllowedOrigin>\n    <AllowedOrigin>(string)</AllowedOrigin>\n    <ExposeHeader>(string)</ExposeHeader>\n    <ExposeHeader>(string)</ExposeHeader>\n    <MaxAgeSeconds>(integer)</MaxAgeSeconds>\n  </CORSRules>\n  <CORSRules>\n    <ID>(integer)</ID>\n    <AllowedHeaders>(string)</AllowedHeaders>\n    <AllowedHeaders>(string)</AllowedHeaders>\n    <AllowedMethod>(string)</AllowedMethod>\n    <AllowedMethod>(string)</AllowedMethod>\n    <AllowedOrigin>(string)</AllowedOrigin>\n    <AllowedOrigin>(string)</AllowedOrigin>\n    <ExposeHeader>(string)</ExposeHeader>\n    <ExposeHeader>(string)</ExposeHeader>\n    <MaxAgeSeconds>(integer)</MaxAgeSeconds>\n  </CORSRules>\n</element>"
						}
					]
				},
				{
					"name": "PutBucketCors",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-MD5",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CORSConfiguration>\n    <CORSRules>\n      <ID>(integer)</ID>\n      <AllowedHeaders>(string)</AllowedHeaders>\n      <AllowedHeaders>(string)</AllowedHeaders>\n      <AllowedMethod>(string)</AllowedMethod>\n      <AllowedMethod>(string)</AllowedMethod>\n      <AllowedOrigin>(string)</AllowedOrigin>\n      <AllowedOrigin>(string)</AllowedOrigin>\n      <ExposeHeader>(string)</ExposeHeader>\n      <ExposeHeader>(string)</ExposeHeader>\n      <MaxAgeSeconds>(integer)</MaxAgeSeconds>\n    </CORSRules>\n    <CORSRules>\n      <ID>(integer)</ID>\n      <AllowedHeaders>(string)</AllowedHeaders>\n      <AllowedHeaders>(string)</AllowedHeaders>\n      <AllowedMethod>(string)</AllowedMethod>\n      <AllowedMethod>(string)</AllowedMethod>\n      <AllowedOrigin>(string)</AllowedOrigin>\n      <AllowedOrigin>(string)</AllowedOrigin>\n      <ExposeHeader>(string)</ExposeHeader>\n      <ExposeHeader>(string)</ExposeHeader>\n      <MaxAgeSeconds>(integer)</MaxAgeSeconds>\n    </CORSRules>\n  </CORSConfiguration>\n</element>",
							"options": {
								"raw": {
									"headerFamily": "xml",
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?cors&cors=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "cors",
									"value": null
								},
								{
									"key": "cors",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>Sets the `CORS` configuration for your bucket. If the configuration exists, it will be overwritten and replaced.</p>          <p>To use this operation, you must be allowed to perform the `PutBucketCORS` operation. By default, the bucket owner has this permission and can grant it to others.</p> <p>You set this configuration on a bucket so that the bucket can service cross-origin requests. For example, you might want to enable a request whose origin is `http://www.example.com` to access your IONOS Object Storage bucket at `my.example.bucket.com` by using the browser's `XMLHttpRequest` capability.</p> <p>To enable cross-origin resource sharing (CORS) on a bucket, you add the `cors` subresource to the bucket. The `cors` subresource is an XML document in which you configure rules that identify origins and the HTTP methods that can be executed on your bucket. The document is limited to 64 KB in size. </p> <p>When IONOS Object Storage receives a cross-origin request (or a pre-flight OPTIONS request) against a bucket, it evaluates the `cors` configuration on the bucket and uses the first `CORSRule` rule that matches the incoming browser request to enable a cross-origin request. For a rule to match, the following conditions must be met:</p> <ul> <li> <p>The request's `Origin` header must match `AllowedOrigin` elements.</p> </li> <li> <p>The request method (for example, GET, PUT, HEAD, and so on) or the `Access-Control-Request-Method` header in case of a pre-flight `OPTIONS` request must be one of the `AllowedMethod` elements. </p> </li> <li> <p>Every header specified in the `Access-Control-Request-Headers` request header of a pre-flight request must match an `AllowedHeader` element. </p> </li> </ul>"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <CORSConfiguration>\n    <CORSRules>\n      <ID>(integer)</ID>\n      <AllowedHeaders>(string)</AllowedHeaders>\n      <AllowedHeaders>(string)</AllowedHeaders>\n      <AllowedMethod>(string)</AllowedMethod>\n      <AllowedMethod>(string)</AllowedMethod>\n      <AllowedOrigin>(string)</AllowedOrigin>\n      <AllowedOrigin>(string)</AllowedOrigin>\n      <ExposeHeader>(string)</ExposeHeader>\n      <ExposeHeader>(string)</ExposeHeader>\n      <MaxAgeSeconds>(integer)</MaxAgeSeconds>\n    </CORSRules>\n    <CORSRules>\n      <ID>(integer)</ID>\n      <AllowedHeaders>(string)</AllowedHeaders>\n      <AllowedHeaders>(string)</AllowedHeaders>\n      <AllowedMethod>(string)</AllowedMethod>\n      <AllowedMethod>(string)</AllowedMethod>\n      <AllowedOrigin>(string)</AllowedOrigin>\n      <AllowedOrigin>(string)</AllowedOrigin>\n      <ExposeHeader>(string)</ExposeHeader>\n      <ExposeHeader>(string)</ExposeHeader>\n      <MaxAgeSeconds>(integer)</MaxAgeSeconds>\n    </CORSRules>\n  </CORSConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?cors=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "cors",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "DeleteBucketCors",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?cors&cors=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "cors",
									"value": null
								},
								{
									"key": "cors",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Deletes the `CORS` configuration information set for the bucket.</p> <p>To use this operation, you must have permission to perform the `PutBucketCORS` operation. The bucket owner has this permission by default and can grant this permission to others.\n#### S3 API Compatibility - The `x-amz-expected-bucket-owner` header isn't supported."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?cors=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "cors",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?encryption",
			"item": [
				{
					"name": "GetBucketEncryption",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?encryption&encryption=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "encryption",
									"value": null
								},
								{
									"key": "encryption",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>Returns the default encryption configuration for the bucket.</p>         <p>In the current version, only the bucket owner is allowed to perform this operation. We currently do not support the use of bucket policies to extend bucket encryption permissions to users other than the bucket owner.</p> <p>If the bucket does not have a default encryption configuration, GetBucketEncryption returns `404 ServerSideEncryptionConfigurationNotFoundError`.</p>"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?encryption=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "encryption",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <ServerSideEncryptionConfiguration>\n    <Rules>\n      <ApplyServerSideEncryptionByDefault>\n        <SSEAlgorithm>(string)</SSEAlgorithm>\n      </ApplyServerSideEncryptionByDefault>\n    </Rules>\n    <Rules>\n      <ApplyServerSideEncryptionByDefault>\n        <SSEAlgorithm>(string)</SSEAlgorithm>\n      </ApplyServerSideEncryptionByDefault>\n    </Rules>\n  </ServerSideEncryptionConfiguration>\n</element>"
						},
						{
							"name": "ServerSideEncryptionConfigurationNotFoundError",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?encryption=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "encryption",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "PutBucketEncryption",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <ServerSideEncryptionConfiguration>\n    <Rules>\n      <ApplyServerSideEncryptionByDefault>\n        <SSEAlgorithm>(string)</SSEAlgorithm>\n      </ApplyServerSideEncryptionByDefault>\n    </Rules>\n    <Rules>\n      <ApplyServerSideEncryptionByDefault>\n        <SSEAlgorithm>(string)</SSEAlgorithm>\n      </ApplyServerSideEncryptionByDefault>\n    </Rules>\n  </ServerSideEncryptionConfiguration>\n</element>",
							"options": {
								"raw": {
									"headerFamily": "xml",
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?encryption&encryption=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "encryption",
									"value": null
								},
								{
									"key": "encryption",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>Sets the AES256 server-side encryption for a bucket with IONOS Object Storage managed keys (SSE-S3).</p> <p>With server-side encryption, IONOS Object Storage encrypts a newly uploaded object in the bucket before saving it to disk and decrypts it when you download the object. Encryption doesn't change the way that you access data as an authorized user. It only further protects your data.</p> <p>In the current version, only the bucket owner is allowed to perform this operation. We do not currently support the use of bucket policies to extend bucket encryption permissions to users other than the bucket owner.</p> <p>IONOS Object Storage confirms that your object is stored with SSE-S3 encryption by returning the response header `x-amz-server-side-encryption` for the <a href=\"#tag/Basic-Operations/operation/GetObject\">Object Read</a> operation.</p> <p>You can also apply encryption with a customer-provided key (SSE-C) to each object at the time of <a href=\"/#tag/Basic-Operations/operation/PutObject\">uploading</a>. In this case, SSE-C encryption will override the SSE-S3 encryption.</p> "
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <ServerSideEncryptionConfiguration>\n    <Rules>\n      <ApplyServerSideEncryptionByDefault>\n        <SSEAlgorithm>(string)</SSEAlgorithm>\n      </ApplyServerSideEncryptionByDefault>\n    </Rules>\n    <Rules>\n      <ApplyServerSideEncryptionByDefault>\n        <SSEAlgorithm>(string)</SSEAlgorithm>\n      </ApplyServerSideEncryptionByDefault>\n    </Rules>\n  </ServerSideEncryptionConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?encryption=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "encryption",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "DeleteBucketEncryption",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?encryption&encryption=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "encryption",
									"value": null
								},
								{
									"key": "encryption",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>This implementation of the DELETE operation removes default encryption from the bucket.</p> <p>In the current version, only the bucket owner is allowed to perform this operation. We currently do not support the use of bucket policies to extend bucket encryption permissions to users other than the bucket owner.</p>"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?encryption=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "encryption",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?policy",
			"item": [
				{
					"name": "GetBucketPolicy",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?policy&policy=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "policy",
									"value": null
								},
								{
									"key": "policy",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Returns the policy of a specified bucket.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:GetBucketPolicy` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n**Note:** The bucket owner can always perform this operation, even if the policy explicitly denies access to it.\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:PutAccelerateConfiguration\",\n        \"s3:PutBucketWebsite\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    },\n    {\n      \"Action\": [\n        \"s3:DeleteBucketPolicy\",\n        \"s3:PutBucketLogging\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    }\n  ],\n  \"Id\": \"<string>\",\n  \"Version\": \"2012-10-17\"\n}"
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "PutBucketPolicy",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-MD5",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:PutAccelerateConfiguration\",\n        \"s3:PutBucketWebsite\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    },\n    {\n      \"Action\": [\n        \"s3:DeleteBucketPolicy\",\n        \"s3:PutBucketLogging\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    }\n  ],\n  \"Id\": \"<string>\",\n  \"Version\": \"2012-10-17\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?policy&policy=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "policy",
									"value": null
								},
								{
									"key": "policy",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Applies a bucket policy to a bucket.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:PutBucketPolicy` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n**Note:** The bucket owner can always perform this operation, even if the policy explicitly denies access to it.\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n- The `x-amz-confirm-remove-self-bucket-access` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:PutAccelerateConfiguration\",\n        \"s3:PutBucketWebsite\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    },\n    {\n      \"Action\": [\n        \"s3:DeleteBucketPolicy\",\n        \"s3:PutBucketLogging\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    }\n  ],\n  \"Id\": \"<string>\",\n  \"Version\": \"2012-10-17\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "InvalidPolicyDocument",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:PutAccelerateConfiguration\",\n        \"s3:PutBucketWebsite\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    },\n    {\n      \"Action\": [\n        \"s3:DeleteBucketPolicy\",\n        \"s3:PutBucketLogging\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    }\n  ],\n  \"Id\": \"<string>\",\n  \"Version\": \"2012-10-17\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:PutAccelerateConfiguration\",\n        \"s3:PutBucketWebsite\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    },\n    {\n      \"Action\": [\n        \"s3:DeleteBucketPolicy\",\n        \"s3:PutBucketLogging\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    }\n  ],\n  \"Id\": \"<string>\",\n  \"Version\": \"2012-10-17\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:PutAccelerateConfiguration\",\n        \"s3:PutBucketWebsite\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    },\n    {\n      \"Action\": [\n        \"s3:DeleteBucketPolicy\",\n        \"s3:PutBucketLogging\"\n      ],\n      \"Effect\": \"Deny\",\n      \"Resource\": [\n        \"arn:aws:s3:::\",\n        \"arn:aws:s3:::\"\n      ],\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam:::user/\",\n          \"arn:aws:iam:::user/\"\n        ]\n      },\n      \"Sid\": \"<string>\",\n      \"Condition\": {\n        \"IpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"NotIpAddress\": {\n          \"aws:SourceIp\": [\n            \"<ipv4>\",\n            \"<ipv4>\"\n          ]\n        },\n        \"DateGreaterThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        },\n        \"DateLessThan\": {\n          \"aws:CurrentTime\": \"<dateTime>\"\n        }\n      }\n    }\n  ],\n  \"Id\": \"<string>\",\n  \"Version\": \"2012-10-17\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "DeleteBucketPolicy",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?policy&policy=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "policy",
									"value": null
								},
								{
									"key": "policy",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Deletes the policy of a specified bucket.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:DeleteBucketPolicy` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n**Note:** The bucket owner can always perform this operation, even if the policy explicitly denies access to it.\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?publicAccessBlock",
			"item": [
				{
					"name": "GetPublicAccessBlock",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?publicAccessBlock&policy=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "publicAccessBlock",
									"value": null
								},
								{
									"key": "policy",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Retrieves the public access configuration for a bucket.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:GetBucketPublicAccessBlock` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n  \"BlockPublicAcls\": \"<boolean>\",\n  \"IgnorePublicAcls\": \"<boolean>\",\n  \"BlockPublicPolicy\": \"<boolean>\",\n  \"RestrictPublicBuckets\": \"<boolean>\"\n}"
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "PutPublicAccessBlock",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-MD5",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<PublicAccessBlockConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <BlockPublicAcls>(boolean)</BlockPublicAcls>\n  <IgnorePublicAcls>(boolean)</IgnorePublicAcls>\n  <BlockPublicPolicy>(boolean)</BlockPublicPolicy>\n  <RestrictPublicBuckets>(boolean)</RestrictPublicBuckets>\n</PublicAccessBlockConfiguration>",
							"options": {
								"raw": {
									"headerFamily": "xml",
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?publicAccessBlock&policy=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "publicAccessBlock",
									"value": null
								},
								{
									"key": "policy",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Blocks public access to an bucket based on the specified parameters. \n\nThis operation modifies the bucket's settings to either prevent public access entirely\nor impose restrictions based on specific conditions.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:PutBucketPublicAccessBlock` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n**Note:** The bucket owner can always perform this operation, even if the policy explicitly denies access to it.\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n- The `x-amz-confirm-remove-self-bucket-access` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<PublicAccessBlockConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <BlockPublicAcls>(boolean)</BlockPublicAcls>\n  <IgnorePublicAcls>(boolean)</IgnorePublicAcls>\n  <BlockPublicPolicy>(boolean)</BlockPublicPolicy>\n  <RestrictPublicBuckets>(boolean)</RestrictPublicBuckets>\n</PublicAccessBlockConfiguration>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "MalformedXML",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<PublicAccessBlockConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <BlockPublicAcls>(boolean)</BlockPublicAcls>\n  <IgnorePublicAcls>(boolean)</IgnorePublicAcls>\n  <BlockPublicPolicy>(boolean)</BlockPublicPolicy>\n  <RestrictPublicBuckets>(boolean)</RestrictPublicBuckets>\n</PublicAccessBlockConfiguration>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<PublicAccessBlockConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <BlockPublicAcls>(boolean)</BlockPublicAcls>\n  <IgnorePublicAcls>(boolean)</IgnorePublicAcls>\n  <BlockPublicPolicy>(boolean)</BlockPublicPolicy>\n  <RestrictPublicBuckets>(boolean)</RestrictPublicBuckets>\n</PublicAccessBlockConfiguration>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<PublicAccessBlockConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <BlockPublicAcls>(boolean)</BlockPublicAcls>\n  <IgnorePublicAcls>(boolean)</IgnorePublicAcls>\n  <BlockPublicPolicy>(boolean)</BlockPublicPolicy>\n  <RestrictPublicBuckets>(boolean)</RestrictPublicBuckets>\n</PublicAccessBlockConfiguration>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "DeletePublicAccessBlock",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?publicAccessBlock&policy=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "publicAccessBlock",
									"value": null
								},
								{
									"key": "policy",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Deletes the public access configuration for a bucket.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:DeleteBucketPublicAccessBlock` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policy=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policy",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?replication",
			"item": [
				{
					"name": "GetBucketReplication",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?replication&replication=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "replication",
									"value": null
								},
								{
									"key": "replication",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Returns the replication configuration of a bucket.\n\nThe replication configuration may take a while to propagate to all IONOS Object Storage systems.\nFor example, when you apply a new configuration with a PUT request or delete a configuration using\na DELETE request. Similarly, a GET request may retrieve the previous state of the configuration,\nor it may still exist if you use a DELETE request.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:GetBucketReplication` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?replication=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "replication",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <ReplicationConfiguration>\n    <Role>(string)</Role>\n    <Rules>\n      <ID>(integer)</ID>\n      <Prefix>(string)</Prefix>\n      <Status>(string)</Status>\n      <Destination>\n        <Bucket>(string)</Bucket>\n        <StorageClass>(string)</StorageClass>\n      </Destination>\n    </Rules>\n    <Rules>\n      <ID>(integer)</ID>\n      <Prefix>(string)</Prefix>\n      <Status>(string)</Status>\n      <Destination>\n        <Bucket>(string)</Bucket>\n        <StorageClass>(string)</StorageClass>\n      </Destination>\n    </Rules>\n  </ReplicationConfiguration>\n</element>"
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?tagging",
			"item": [
				{
					"name": "GetBucketTagging",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?tagging&tagging=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "tagging",
									"value": null
								},
								{
									"key": "tagging",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>Returns the tag set associated with the bucket.</p> <p>To use this operation, you must have permission to perform the `GetBucketTagging` operation. By default, the bucket owner has this permission and can grant this permission to others.</p> <p> `GetBucketTagging` has the following special error:</p> <ul> <li> <p>Error code: `NoSuchTagSetError` </p> <ul> <li> <p>Description: There is no tag set associated with the bucket.</p> </li> </ul> </li> </ul>"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?tagging=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "tagging",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <TagSet>\n    <Key>(string)</Key>\n    <Value>(string)</Value>\n  </TagSet>\n  <TagSet>\n    <Key>(string)</Key>\n    <Value>(string)</Value>\n  </TagSet>\n</element>"
						}
					]
				},
				{
					"name": "PutBucketTagging",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-MD5",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Tagging>\n    <TagSet>\n      <Key>(string)</Key>\n      <Value>(string)</Value>\n    </TagSet>\n    <TagSet>\n      <Key>(string)</Key>\n      <Value>(string)</Value>\n    </TagSet>\n  </Tagging>\n</element>",
							"options": {
								"raw": {
									"headerFamily": "xml",
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?tagging&tagging=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "tagging",
									"value": null
								},
								{
									"key": "tagging",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>Sets the tags for a bucket.</p>          <note> <p> When this operation sets the tags for a bucket, it will overwrite any current tags the bucket already has. You cannot use this operation to add tags to an existing list of tags.</p> </note> <p>To use this operation, you must have permissions to perform the `PutBucketTagging` operation. The bucket owner has this permission by default and can grant this permission to others. </p> <p> `PutBucketTagging` has the following special errors:</p> <ul> <li> <p>Error code: `InvalidTagError` </p> <ul> <li> <p>Description: The tag provided was not a valid tag. This error can occur if the tag did not pass input validation. </p> </li> </ul> </li> <li> <p>Error code: `MalformedXMLError` </p> <ul> <li> <p>Description: The XML provided does not match the schema.</p> </li> </ul> </li> <li> <p>Error code: `OperationAbortedError ` </p> <ul> <li> <p>Description: A conflicting conditional operation is currently in progress against this resource. Please try again.</p> </li> </ul> </li> <li> <p>Error code: `InternalError` </p> <ul> <li> <p>Description: The service was unable to apply the provided tag to the bucket.</p> </li> </ul> </li> </ul>        "
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Tagging>\n    <TagSet>\n      <Key>(string)</Key>\n      <Value>(string)</Value>\n    </TagSet>\n    <TagSet>\n      <Key>(string)</Key>\n      <Value>(string)</Value>\n    </TagSet>\n  </Tagging>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?tagging=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "tagging",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "DeleteBucketTagging",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?tagging&tagging=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "tagging",
									"value": null
								},
								{
									"key": "tagging",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>Deletes the tags from the bucket.</p> <p>To use this operation, you must have permission to perform the `PutBucketTagging` operation. By default, the bucket owner has this permission and can grant this permission to others.</p>"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?tagging=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "tagging",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?website",
			"item": [
				{
					"name": "GetBucketWebsite",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?website&website=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "website",
									"value": null
								},
								{
									"key": "website",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>Returns the website configuration for a bucket. </p> <p>This GET operation requires the `GetBucketWebsite` permission. By default, only the bucket owner can read the bucket website configuration. However, bucket owners can allow other users to read the website configuration by writing a bucket policy granting them the `GetBucketWebsite` permission.</p>"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?website=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "website",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <RedirectAllRequestsTo>\n    <HostName>(string)</HostName>\n    <Protocol>(string)</Protocol>\n  </RedirectAllRequestsTo>\n  <IndexDocument>\n    <Suffix>(string)</Suffix>\n  </IndexDocument>\n  <ErrorDocument>\n    <Key>(string)</Key>\n  </ErrorDocument>\n  <RoutingRule>\n    <Condition>\n      <HttpErrorCodeReturnedEquals>(string)</HttpErrorCodeReturnedEquals>\n      <KeyPrefixEquals>(string)</KeyPrefixEquals>\n    </Condition>\n    <Redirect>\n      <HostName>(string)</HostName>\n      <HttpRedirectCode>(string)</HttpRedirectCode>\n      <Protocol>(string)</Protocol>\n      <ReplaceKeyPrefixWith>(string)</ReplaceKeyPrefixWith>\n      <ReplaceKeyWith>(string)</ReplaceKeyWith>\n    </Redirect>\n  </RoutingRule>\n  <RoutingRule>\n    <Condition>\n      <HttpErrorCodeReturnedEquals>(string)</HttpErrorCodeReturnedEquals>\n      <KeyPrefixEquals>(string)</KeyPrefixEquals>\n    </Condition>\n    <Redirect>\n      <HostName>(string)</HostName>\n      <HttpRedirectCode>(string)</HttpRedirectCode>\n      <Protocol>(string)</Protocol>\n      <ReplaceKeyPrefixWith>(string)</ReplaceKeyPrefixWith>\n      <ReplaceKeyWith>(string)</ReplaceKeyWith>\n    </Redirect>\n  </RoutingRule>\n</element>"
						}
					]
				},
				{
					"name": "PutBucketWebsite",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-MD5",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <WebsiteConfiguration>\n    <ErrorDocument>\n      <Key>(string)</Key>\n    </ErrorDocument>\n    <IndexDocument>\n      <Suffix>(string)</Suffix>\n    </IndexDocument>\n    <RedirectAllRequestsTo>\n      <HostName>(string)</HostName>\n      <Protocol>(string)</Protocol>\n    </RedirectAllRequestsTo>\n    <RoutingRule>\n      <Condition>\n        <HttpErrorCodeReturnedEquals>(string)</HttpErrorCodeReturnedEquals>\n        <KeyPrefixEquals>(string)</KeyPrefixEquals>\n      </Condition>\n      <Redirect>\n        <HostName>(string)</HostName>\n        <HttpRedirectCode>(string)</HttpRedirectCode>\n        <Protocol>(string)</Protocol>\n        <ReplaceKeyPrefixWith>(string)</ReplaceKeyPrefixWith>\n        <ReplaceKeyWith>(string)</ReplaceKeyWith>\n      </Redirect>\n    </RoutingRule>\n    <RoutingRule>\n      <Condition>\n        <HttpErrorCodeReturnedEquals>(string)</HttpErrorCodeReturnedEquals>\n        <KeyPrefixEquals>(string)</KeyPrefixEquals>\n      </Condition>\n      <Redirect>\n        <HostName>(string)</HostName>\n        <HttpRedirectCode>(string)</HttpRedirectCode>\n        <Protocol>(string)</Protocol>\n        <ReplaceKeyPrefixWith>(string)</ReplaceKeyPrefixWith>\n        <ReplaceKeyWith>(string)</ReplaceKeyWith>\n      </Redirect>\n    </RoutingRule>\n  </WebsiteConfiguration>\n</element>",
							"options": {
								"raw": {
									"headerFamily": "xml",
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?website&website=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "website",
									"value": null
								},
								{
									"key": "website",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>Sets the configuration of the website that is specified in the `website` subresource. To configure a bucket as a website, you can add this subresource on the bucket with website configuration information such as the file name of the index document and any redirect rules. </p>                  <p>This PUT operation requires the `PutBucketWebsite` permission. By default, only the bucket owner can configure the website attached to a bucket; however, bucket owners can allow other users to set the website configuration by writing a bucket policy that grants them the `PutBucketWebsite` permission.</p> <p>To redirect all website requests sent to the bucket's website endpoint, you add a website configuration with the following elements. Because all requests are sent to another website, you don't need to provide index document name for the bucket.</p> <ul> <li> <p> `WebsiteConfiguration` </p> </li> <li> <p> `RedirectAllRequestsTo` </p> </li> <li> <p> `HostName` </p> </li> <li> <p> `Protocol` </p> </li> </ul> <p>If you want granular control over redirects, you can use the following elements to add routing rules that describe conditions for redirecting requests and information about the redirect destination. In this case, the website configuration must provide an index document for the bucket, because some requests might not be redirected. </p> <ul> <li> <p> `WebsiteConfiguration` </p> </li> <li> <p> `IndexDocument` </p> </li> <li> <p> `Suffix` </p> </li> <li> <p> `ErrorDocument` </p> </li> <li> <p> `Key` </p> </li> <li> <p> `RoutingRules` </p> </li> <li> <p> `RoutingRule` </p> </li> <li> <p> `Condition` </p> </li> <li> <p> `HttpErrorCodeReturnedEquals` </p> </li> <li> <p> `KeyPrefixEquals` </p> </li> <li> <p> `Redirect` </p> </li> <li> <p> `Protocol` </p> </li> <li> <p> `HostName` </p> </li> <li> <p> `ReplaceKeyPrefixWith` </p> </li> <li> <p> `ReplaceKeyWith` </p> </li> <li> <p> `HttpRedirectCode` </p> </li> </ul>"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <WebsiteConfiguration>\n    <ErrorDocument>\n      <Key>(string)</Key>\n    </ErrorDocument>\n    <IndexDocument>\n      <Suffix>(string)</Suffix>\n    </IndexDocument>\n    <RedirectAllRequestsTo>\n      <HostName>(string)</HostName>\n      <Protocol>(string)</Protocol>\n    </RedirectAllRequestsTo>\n    <RoutingRule>\n      <Condition>\n        <HttpErrorCodeReturnedEquals>(string)</HttpErrorCodeReturnedEquals>\n        <KeyPrefixEquals>(string)</KeyPrefixEquals>\n      </Condition>\n      <Redirect>\n        <HostName>(string)</HostName>\n        <HttpRedirectCode>(string)</HttpRedirectCode>\n        <Protocol>(string)</Protocol>\n        <ReplaceKeyPrefixWith>(string)</ReplaceKeyPrefixWith>\n        <ReplaceKeyWith>(string)</ReplaceKeyWith>\n      </Redirect>\n    </RoutingRule>\n    <RoutingRule>\n      <Condition>\n        <HttpErrorCodeReturnedEquals>(string)</HttpErrorCodeReturnedEquals>\n        <KeyPrefixEquals>(string)</KeyPrefixEquals>\n      </Condition>\n      <Redirect>\n        <HostName>(string)</HostName>\n        <HttpRedirectCode>(string)</HttpRedirectCode>\n        <Protocol>(string)</Protocol>\n        <ReplaceKeyPrefixWith>(string)</ReplaceKeyPrefixWith>\n        <ReplaceKeyWith>(string)</ReplaceKeyWith>\n      </Redirect>\n    </RoutingRule>\n  </WebsiteConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?website=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "website",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "DeleteBucketWebsite",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?website&website=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "website",
									"value": null
								},
								{
									"key": "website",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>This operation removes the website configuration for a bucket. IONOS Object Storage returns a `200 OK` response upon successfully deleting a website configuration on the specified bucket. You will get a `200 OK` response if the website configuration you are trying to delete does not exist on the bucket. IONOS Object Storage returns a `404` response if the bucket specified in the request does not exist.</p> <p>This DELETE operation requires the `DeleteBucketWebsite` permission. By default, only the bucket owner can delete the website configuration attached to a bucket. However, bucket owners can grant other users permission to delete the website configuration by writing a bucket policy granting them the `DeleteBucketWebsite` permission.</p>"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?website=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "website",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?delete",
			"item": [
				{
					"name": "DeleteObjects",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-amz-mfa",
								"value": "<string>",
								"description": "The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA Delete enabled."
							},
							{
								"key": "x-amz-bypass-governance-retention",
								"value": "<boolean>",
								"description": "Specifies whether you want to delete this object even if it has a Governance-type Object Lock in place. To use this header, you must have the `PutBucketPublicAccessBlock` permission."
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Delete>\n    <Objects>\n      <Key>(string)</Key>\n      <VersionId>(string)</VersionId>\n    </Objects>\n    <Objects>\n      <Key>(string)</Key>\n      <VersionId>(string)</VersionId>\n    </Objects>\n    <Quiet>(boolean)</Quiet>\n  </Delete>\n</element>",
							"options": {
								"raw": {
									"headerFamily": "xml",
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?delete&delete=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "delete",
									"value": null
								},
								{
									"key": "delete",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>This operation enables you to delete multiple objects from a bucket using a single HTTP request. If you know the object keys that you want to delete, then this operation provides a suitable alternative to sending individual delete requests, reducing per-request overhead.</p> <p>The request contains a list of up to 1000 keys that you want to delete. In the XML, you provide the object key names, and optionally, version IDs if you want to delete a specific version of the object from a versioning-enabled bucket. For each key, IONOS Object Storage performs a delete operation and returns the result of that delete, success, or failure, in the response. Note that if the object specified in the request is not found, IONOS Object Storage returns the result as deleted.</p> <p> The operation supports two modes for the response: verbose and quiet. By default, the operation uses verbose mode in which the response includes the result of deletion of each key in your request. In quiet mode the response includes only keys where the delete operation encountered an error. For a successful deletion, the operation does not return any information about the delete in the response body.</p>"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "x-amz-mfa",
										"value": "<string>",
										"description": "The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA Delete enabled."
									},
									{
										"key": "x-amz-bypass-governance-retention",
										"value": "<boolean>",
										"description": "Specifies whether you want to delete this object even if it has a Governance-type Object Lock in place. To use this header, you must have the `PutBucketPublicAccessBlock` permission."
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Delete>\n    <Objects>\n      <Key>(string)</Key>\n      <VersionId>(string)</VersionId>\n    </Objects>\n    <Objects>\n      <Key>(string)</Key>\n      <VersionId>(string)</VersionId>\n    </Objects>\n    <Quiet>(boolean)</Quiet>\n  </Delete>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?delete=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "delete",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Deleted>\n    <Key>(string)</Key>\n    <VersionId>(string)</VersionId>\n    <DeleteMarker>(boolean)</DeleteMarker>\n    <DeleteMarkerVersionId>(string)</DeleteMarkerVersionId>\n  </Deleted>\n  <Deleted>\n    <Key>(string)</Key>\n    <VersionId>(string)</VersionId>\n    <DeleteMarker>(boolean)</DeleteMarker>\n    <DeleteMarkerVersionId>(string)</DeleteMarkerVersionId>\n  </Deleted>\n  <Errors>\n    <Key>(string)</Key>\n    <VersionId>(string)</VersionId>\n    <Code>(string)</Code>\n    <Message>(string)</Message>\n  </Errors>\n  <Errors>\n    <Key>(string)</Key>\n    <VersionId>(string)</VersionId>\n    <Code>(string)</Code>\n    <Message>(string)</Message>\n  </Errors>\n</element>"
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?lifecycle",
			"item": [
				{
					"name": "GetBucketLifecycle",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?lifecycle&lifecycle=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "lifecycle",
									"value": null
								},
								{
									"key": "lifecycle",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Returns the lifecycle configuration for the specified bucket.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:GetLifecycleConfiguration` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?lifecycle=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "lifecycle",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Rules>\n    <ID>(string)</ID>\n    <Prefix>(string)</Prefix>\n    <Status>(string)</Status>\n    <Expiration>\n      <Date>(string)</Date>\n      <Days>(integer)</Days>\n      <ExpiredObjectDeleteMarker>(boolean)</ExpiredObjectDeleteMarker>\n    </Expiration>\n    <NoncurrentVersionExpiration>\n      <NoncurrentDays>(integer)</NoncurrentDays>\n    </NoncurrentVersionExpiration>\n    <AbortIncompleteMultipartUpload>\n      <DaysAfterInitiation>(integer)</DaysAfterInitiation>\n    </AbortIncompleteMultipartUpload>\n  </Rules>\n  <Rules>\n    <ID>(string)</ID>\n    <Prefix>(string)</Prefix>\n    <Status>(string)</Status>\n    <Expiration>\n      <Date>(string)</Date>\n      <Days>(integer)</Days>\n      <ExpiredObjectDeleteMarker>(boolean)</ExpiredObjectDeleteMarker>\n    </Expiration>\n    <NoncurrentVersionExpiration>\n      <NoncurrentDays>(integer)</NoncurrentDays>\n    </NoncurrentVersionExpiration>\n    <AbortIncompleteMultipartUpload>\n      <DaysAfterInitiation>(integer)</DaysAfterInitiation>\n    </AbortIncompleteMultipartUpload>\n  </Rules>\n</element>"
						},
						{
							"name": "NoSuchLifecycleConfiguration",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?lifecycle=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "lifecycle",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "PutBucketLifecycle",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-MD5",
								"value": "<string>",
								"description": "(Required) "
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <LifecycleConfiguration>\n    <Rules>\n      <ID>(string)</ID>\n      <Prefix>(string)</Prefix>\n      <Status>(string)</Status>\n      <Expiration>\n        <Date>(string)</Date>\n        <Days>(integer)</Days>\n        <ExpiredObjectDeleteMarker>(boolean)</ExpiredObjectDeleteMarker>\n      </Expiration>\n      <NoncurrentVersionExpiration>\n        <NoncurrentDays>(integer)</NoncurrentDays>\n      </NoncurrentVersionExpiration>\n      <AbortIncompleteMultipartUpload>\n        <DaysAfterInitiation>(integer)</DaysAfterInitiation>\n      </AbortIncompleteMultipartUpload>\n    </Rules>\n    <Rules>\n      <ID>(string)</ID>\n      <Prefix>(string)</Prefix>\n      <Status>(string)</Status>\n      <Expiration>\n        <Date>(string)</Date>\n        <Days>(integer)</Days>\n        <ExpiredObjectDeleteMarker>(boolean)</ExpiredObjectDeleteMarker>\n      </Expiration>\n      <NoncurrentVersionExpiration>\n        <NoncurrentDays>(integer)</NoncurrentDays>\n      </NoncurrentVersionExpiration>\n      <AbortIncompleteMultipartUpload>\n        <DaysAfterInitiation>(integer)</DaysAfterInitiation>\n      </AbortIncompleteMultipartUpload>\n    </Rules>\n  </LifecycleConfiguration>\n</element>",
							"options": {
								"raw": {
									"headerFamily": "xml",
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?lifecycle&lifecycle=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "lifecycle",
									"value": null
								},
								{
									"key": "lifecycle",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Creates a new lifecycle configuration for a specified bucket, or replaces an existing configuration.</p>\nThis lifecycle configuration allows automatic management of the objects within the bucket.\nTypical actions can include the deletion of objects after a certain period or deletion of non-current\nversions of objects.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:PutLifecycleConfiguration` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\n#### S3 API Compatibility\n- The `NewerNoncurrentVersions` setting is not supported for the `NoncurrentVersionExpiration` option.\n- The `Transition` and the `NoncurrentVersionTransition` options are omitted as only the `STANDARD` storage class is currenly supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>",
										"description": "(Required) "
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <LifecycleConfiguration>\n    <Rules>\n      <ID>(string)</ID>\n      <Prefix>(string)</Prefix>\n      <Status>(string)</Status>\n      <Expiration>\n        <Date>(string)</Date>\n        <Days>(integer)</Days>\n        <ExpiredObjectDeleteMarker>(boolean)</ExpiredObjectDeleteMarker>\n      </Expiration>\n      <NoncurrentVersionExpiration>\n        <NoncurrentDays>(integer)</NoncurrentDays>\n      </NoncurrentVersionExpiration>\n      <AbortIncompleteMultipartUpload>\n        <DaysAfterInitiation>(integer)</DaysAfterInitiation>\n      </AbortIncompleteMultipartUpload>\n    </Rules>\n    <Rules>\n      <ID>(string)</ID>\n      <Prefix>(string)</Prefix>\n      <Status>(string)</Status>\n      <Expiration>\n        <Date>(string)</Date>\n        <Days>(integer)</Days>\n        <ExpiredObjectDeleteMarker>(boolean)</ExpiredObjectDeleteMarker>\n      </Expiration>\n      <NoncurrentVersionExpiration>\n        <NoncurrentDays>(integer)</NoncurrentDays>\n      </NoncurrentVersionExpiration>\n      <AbortIncompleteMultipartUpload>\n        <DaysAfterInitiation>(integer)</DaysAfterInitiation>\n      </AbortIncompleteMultipartUpload>\n    </Rules>\n  </LifecycleConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?lifecycle=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "lifecycle",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "MalformedXML",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>",
										"description": "(Required) "
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <LifecycleConfiguration>\n    <Rules>\n      <ID>(string)</ID>\n      <Prefix>(string)</Prefix>\n      <Status>(string)</Status>\n      <Expiration>\n        <Date>(string)</Date>\n        <Days>(integer)</Days>\n        <ExpiredObjectDeleteMarker>(boolean)</ExpiredObjectDeleteMarker>\n      </Expiration>\n      <NoncurrentVersionExpiration>\n        <NoncurrentDays>(integer)</NoncurrentDays>\n      </NoncurrentVersionExpiration>\n      <AbortIncompleteMultipartUpload>\n        <DaysAfterInitiation>(integer)</DaysAfterInitiation>\n      </AbortIncompleteMultipartUpload>\n    </Rules>\n    <Rules>\n      <ID>(string)</ID>\n      <Prefix>(string)</Prefix>\n      <Status>(string)</Status>\n      <Expiration>\n        <Date>(string)</Date>\n        <Days>(integer)</Days>\n        <ExpiredObjectDeleteMarker>(boolean)</ExpiredObjectDeleteMarker>\n      </Expiration>\n      <NoncurrentVersionExpiration>\n        <NoncurrentDays>(integer)</NoncurrentDays>\n      </NoncurrentVersionExpiration>\n      <AbortIncompleteMultipartUpload>\n        <DaysAfterInitiation>(integer)</DaysAfterInitiation>\n      </AbortIncompleteMultipartUpload>\n    </Rules>\n  </LifecycleConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?lifecycle=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "lifecycle",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "DeleteBucketLifecycle",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?lifecycle&lifecycle=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "lifecycle",
									"value": null
								},
								{
									"key": "lifecycle",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Deletes the lifecycle configuration from the specified bucket.\nAs a result, objects within the bucket will neither expire nor be automatically deleted based\non any rules from the deleted configuration.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:PutLifecycleConfiguration` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\n**Note:** A brief delay may occur before the lifecycle configuration deletion is fully\npropagated across all IONOS Object Storage systems. During this time, lifecycle rules may remain temporarily active.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?lifecycle=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "lifecycle",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?location",
			"item": [
				{
					"name": "GetBucketLocation",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?location&location=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "location",
									"value": null
								},
								{
									"key": "location",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Returns the region the bucket resides in. \n\n#### Permissions\nThis operation is available for all users of the contract.\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?location=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "location",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <LocationConstraint xmlns:=\"http://s3.amazonaws.com/doc/2006-03-01/\">(string)</LocationConstraint>\n</element>"
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?location=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "location",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?location=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "location",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?policyStatus",
			"item": [
				{
					"name": "GetBucketPolicyStatus",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?policyStatus&policyStatus=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "policyStatus",
									"value": null
								},
								{
									"key": "policyStatus",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Retrieves the policy status of a bucket, indicating whether the bucket is public. \n\nIONOS Object Storage considers a bucket policy to be \"public\" if any statement in the policy is public.\nA statement is considered public if the `Effect` is `Allow` and the `Principal` has a wildcard -- unless there\nis an `IpAddress:{aws:SourceIp}` condition associated with the statement that restricts the requesting\nsource IP to one or more specified IP addresses.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:GetBucketPolicyStatus` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policyStatus=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policyStatus",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <PolicyStatus>\n    <IsPublic>(boolean)</IsPublic>\n  </PolicyStatus>\n</element>"
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policyStatus=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policyStatus",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "NoSuchBucket",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?policyStatus=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "policyStatus",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?versioning",
			"item": [
				{
					"name": "GetBucketVersioning",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?versioning&versioning=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "versioning",
									"value": null
								},
								{
									"key": "versioning",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Returns the versioning state of a bucket.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:GetBucketVersioning` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\n#### S3 API Compatibility\n- The `x-amz-expected-bucket-owner` header isn't supported.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?versioning=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "versioning",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<VersioningConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n  <Status>(string)</Status>\n  <MfaDelete>(string)</MfaDelete>\n</VersioningConfiguration>"
						}
					]
				},
				{
					"name": "PutBucketVersioning",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-MD5",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <VersioningConfiguration>\n    <Status>(string)</Status>\n    <MfaDelete>(string)</MfaDelete>\n  </VersioningConfiguration>\n</element>",
							"options": {
								"raw": {
									"headerFamily": "xml",
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?versioning&versioning=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "versioning",
									"value": null
								},
								{
									"key": "versioning",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Configures the versioning state of an bucket. Versioning allows keeping multiple variants of an object in the same bucket.\n\nThe versioning state can be one of the following:\n- `Enabled`: Activates versioning for the bucket. All objects added receive a unique version ID.\n- `Suspended`: Deactivates versioning. New objects get a null version ID. However, previously created version IDs persist.\n\n#### Lifecycle configuration for versioned buckets\nWith Versioning, a bucket maintains one current version of an object and potentially multiple noncurrent (previous) versions,\nrequiring additional management to handle noncurrent object version deletions using a Lifecycle Configuration.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:PutBucketVersioning` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n\n#### S3 API Compatibility\n- The `x-amz-mfa` header is not supported.\n- The `MfaDelete` setting is ignored in the PUT request.\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <VersioningConfiguration>\n    <Status>(string)</Status>\n    <MfaDelete>(string)</MfaDelete>\n  </VersioningConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?versioning=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "versioning",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "MalformedXML",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <VersioningConfiguration>\n    <Status>(string)</Status>\n    <MfaDelete>(string)</MfaDelete>\n  </VersioningConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?versioning=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "versioning",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "InvalidBucketState",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <VersioningConfiguration>\n    <Status>(string)</Status>\n    <MfaDelete>(string)</MfaDelete>\n  </VersioningConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?versioning=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "versioning",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?object-lock",
			"item": [
				{
					"name": "GetObjectLockConfiguration",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?object-lock&object-lock=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "object-lock",
									"value": null
								},
								{
									"key": "object-lock",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Retrieves the Object Lock configuration for a bucket.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:GetBucketObjectLockConfiguration` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?object-lock=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "object-lock",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ObjectLockConfiguration>\n  <ObjectLockConfiguration>\n    <Rule>\n      <DefaultRetention>\n        <Mode>(string)</Mode>\n        <Days>(integer)</Days>\n        <Years>(integer)</Years>\n      </DefaultRetention>\n    </Rule>\n  </ObjectLockConfiguration>\n</ObjectLockConfiguration>"
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?object-lock=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "object-lock",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "ObjectLockConfigurationNotFoundError, NoSuchBucket or NoSuchKey",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?object-lock=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "object-lock",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				},
				{
					"name": "PutObjectLockConfiguration",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-MD5",
								"value": "<string>",
								"description": "(Required) "
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <ObjectLockConfiguration>\n    <ObjectLockEnabled>(string)</ObjectLockEnabled>\n    <Rule>\n      <DefaultRetention>\n        <Mode>(string)</Mode>\n        <Days>(integer)</Days>\n        <Years>(integer)</Years>\n      </DefaultRetention>\n    </Rule>\n  </ObjectLockConfiguration>\n</element>",
							"options": {
								"raw": {
									"headerFamily": "xml",
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?object-lock&object-lock=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "object-lock",
									"value": null
								},
								{
									"key": "object-lock",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "Applies an Object Lock configuration on the specified bucket, which requires\nthe Object Lock feature to have been enabled during its creation.\nThe rule specified in the Object Lock configuration will be applied by default to\nevery new object placed in the specified bucket.\n\n**Note:**\n- An Object Lock Configuration can only be applied to buckets\nwith Object Lock enabled.\n- This feature can only be activated on a new bucket\nduring its creation.\n- Object Lock cannot be enabled on a bucket that already exists.\n\n#### Permissions\nYou must be the contract owner or an administrator to perform this operation. If not, they can grant you permission\nto perform the `s3:PutBucketObjectLockConfiguration` operation using [Bucket Policy](#tag/Policy/operation/PutBucketPolicy).\n"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>",
										"description": "(Required) "
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <ObjectLockConfiguration>\n    <ObjectLockEnabled>(string)</ObjectLockEnabled>\n    <Rule>\n      <DefaultRetention>\n        <Mode>(string)</Mode>\n        <Days>(integer)</Days>\n        <Years>(integer)</Years>\n      </DefaultRetention>\n    </Rule>\n  </ObjectLockConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?object-lock=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "object-lock",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "MalformedXML",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>",
										"description": "(Required) "
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <ObjectLockConfiguration>\n    <ObjectLockEnabled>(string)</ObjectLockEnabled>\n    <Rule>\n      <DefaultRetention>\n        <Mode>(string)</Mode>\n        <Days>(integer)</Days>\n        <Years>(integer)</Years>\n      </DefaultRetention>\n    </Rule>\n  </ObjectLockConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?object-lock=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "object-lock",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "AccessDenied",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>",
										"description": "(Required) "
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <ObjectLockConfiguration>\n    <ObjectLockEnabled>(string)</ObjectLockEnabled>\n    <Rule>\n      <DefaultRetention>\n        <Mode>(string)</Mode>\n        <Days>(integer)</Days>\n        <Years>(integer)</Years>\n      </DefaultRetention>\n    </Rule>\n  </ObjectLockConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?object-lock=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "object-lock",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						},
						{
							"name": "InvalidBucketState",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-MD5",
										"value": "<string>",
										"description": "(Required) "
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <ObjectLockConfiguration>\n    <ObjectLockEnabled>(string)</ObjectLockEnabled>\n    <Rule>\n      <DefaultRetention>\n        <Mode>(string)</Mode>\n        <Days>(integer)</Days>\n        <Years>(integer)</Years>\n      </DefaultRetention>\n    </Rule>\n  </ObjectLockConfiguration>\n</element>",
									"options": {
										"raw": {
											"headerFamily": "xml",
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?object-lock=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "object-lock",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error>\n  <Code>(string)</Code>\n  <Message>(string)</Message>\n  <RequestId>(string)</RequestId>\n  <HostId>(string)</HostId>\n</Error>"
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?uploads",
			"item": [
				{
					"name": "ListMultipartUploads",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?uploads&delimiter=<string>&encoding-type=url&key-marker=<string>&max-uploads=<integer>&prefix=<string>&upload-id-marker=<string>&MaxUploads=<string>&KeyMarker=<string>&UploadIdMarker=<string>&uploads=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "uploads",
									"value": null
								},
								{
									"key": "delimiter",
									"value": "<string>",
									"description": "<p>Character you use to group keys.</p> <p>All keys that contain the same string between the prefix, if specified, and the first occurrence of the delimiter after the prefix are grouped under a single result element, `CommonPrefixes`. If you don't specify the prefix parameter, then the substring starts at the beginning of the key. The keys that are grouped under `CommonPrefixes` result element are not returned elsewhere in the response.</p>"
								},
								{
									"key": "encoding-type",
									"value": "url"
								},
								{
									"key": "key-marker",
									"value": "<string>",
									"description": "<p>Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.</p> <p>If `upload-id-marker` is not specified, only the keys lexicographically greater than the specified `key-marker` will be included in the list.</p> <p>If `upload-id-marker` is specified, any multipart uploads for a key equal to the `key-marker` might also be included, provided those multipart uploads have upload IDs lexicographically greater than the specified `upload-id-marker`.</p>"
								},
								{
									"key": "max-uploads",
									"value": "<integer>",
									"description": "Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response."
								},
								{
									"key": "prefix",
									"value": "<string>",
									"description": "Lists in-progress uploads only for those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different grouping of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.)"
								},
								{
									"key": "upload-id-marker",
									"value": "<string>",
									"description": "Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored. Otherwise, any multipart uploads for a key equal to the key-marker might be included in the list only if they have an upload ID lexicographically greater than the specified `upload-id-marker`."
								},
								{
									"key": "MaxUploads",
									"value": "<string>",
									"description": "Pagination limit"
								},
								{
									"key": "KeyMarker",
									"value": "<string>",
									"description": "Pagination token"
								},
								{
									"key": "UploadIdMarker",
									"value": "<string>",
									"description": "Pagination token"
								},
								{
									"key": "uploads",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>This operation lists in-progress multipart uploads. An in-progress multipart upload is a multipart upload that has been initiated using the Initiate Multipart Upload request, but has not yet been completed or aborted.</p> <p>This operation returns at most 1,000 multipart uploads in the response. 1,000 multipart uploads is the maximum number of uploads a response can include, which is also the default value. You can further limit the number of uploads in a response by specifying the `max-uploads` parameter in the response. If additional multipart uploads satisfy the list criteria, the response will contain an `IsTruncated` element with the value true. To list the additional multipart uploads, use the `key-marker` and `upload-id-marker` request parameters.</p> <p>In the response, the uploads are sorted by key. If your application has initiated more than one multipart upload using the same object key, then uploads in the response are first sorted by key. Additionally, uploads are sorted in ascending order within each key by the upload initiation time.</p>"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?delimiter=<string>&encoding-type=url&key-marker=<string>&max-uploads=<integer>&prefix=<string>&upload-id-marker=<string>&MaxUploads=<string>&KeyMarker=<string>&UploadIdMarker=<string>&uploads=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "delimiter",
											"value": "<string>",
											"description": "<p>Character you use to group keys.</p> <p>All keys that contain the same string between the prefix, if specified, and the first occurrence of the delimiter after the prefix are grouped under a single result element, `CommonPrefixes`. If you don't specify the prefix parameter, then the substring starts at the beginning of the key. The keys that are grouped under `CommonPrefixes` result element are not returned elsewhere in the response.</p>"
										},
										{
											"key": "encoding-type",
											"value": "url"
										},
										{
											"key": "key-marker",
											"value": "<string>",
											"description": "<p>Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.</p> <p>If `upload-id-marker` is not specified, only the keys lexicographically greater than the specified `key-marker` will be included in the list.</p> <p>If `upload-id-marker` is specified, any multipart uploads for a key equal to the `key-marker` might also be included, provided those multipart uploads have upload IDs lexicographically greater than the specified `upload-id-marker`.</p>"
										},
										{
											"key": "max-uploads",
											"value": "<integer>",
											"description": "Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response."
										},
										{
											"key": "prefix",
											"value": "<string>",
											"description": "Lists in-progress uploads only for those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different grouping of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.)"
										},
										{
											"key": "upload-id-marker",
											"value": "<string>",
											"description": "Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored. Otherwise, any multipart uploads for a key equal to the key-marker might be included in the list only if they have an upload ID lexicographically greater than the specified `upload-id-marker`."
										},
										{
											"key": "MaxUploads",
											"value": "<string>",
											"description": "Pagination limit"
										},
										{
											"key": "KeyMarker",
											"value": "<string>",
											"description": "Pagination token"
										},
										{
											"key": "UploadIdMarker",
											"value": "<string>",
											"description": "Pagination token"
										},
										{
											"key": "uploads",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <Name>(string)</Name>\n  <KeyMarker>(string)</KeyMarker>\n  <UploadIdMarker>(string)</UploadIdMarker>\n  <NextKeyMarker>(string)</NextKeyMarker>\n  <Prefix>(string)</Prefix>\n  <Delimiter>(string)</Delimiter>\n  <NextUploadIdMarker>(string)</NextUploadIdMarker>\n  <MaxUploads>(integer)</MaxUploads>\n  <IsTruncated>(boolean)</IsTruncated>\n  <Uploads>\n    <UploadId>(string)</UploadId>\n    <Key>(string)</Key>\n    <Initiated>(string)</Initiated>\n    <StorageClass>(string)</StorageClass>\n    <Owner>\n      <ID>(integer)</ID>\n      <DisplayName>(string)</DisplayName>\n    </Owner>\n    <Initiator>\n      <ID>(integer)</ID>\n      <DisplayName>(string)</DisplayName>\n    </Initiator>\n  </Uploads>\n  <Uploads>\n    <UploadId>(string)</UploadId>\n    <Key>(string)</Key>\n    <Initiated>(string)</Initiated>\n    <StorageClass>(string)</StorageClass>\n    <Owner>\n      <ID>(integer)</ID>\n      <DisplayName>(string)</DisplayName>\n    </Owner>\n    <Initiator>\n      <ID>(integer)</ID>\n      <DisplayName>(string)</DisplayName>\n    </Initiator>\n  </Uploads>\n  <CommonPrefixes>\n    <Prefix>(string)</Prefix>\n  </CommonPrefixes>\n  <CommonPrefixes>\n    <Prefix>(string)</Prefix>\n  </CommonPrefixes>\n  <EncodingType>(string)</EncodingType>\n</element>"
						}
					]
				}
			]
		},
		{
			"name": "{Bucket}?versions",
			"item": [
				{
					"name": "ListObjectVersions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{Bucket}}?versions&delimiter=<string>&encoding-type=url&key-marker=<string>&max-keys=<integer>&prefix=<string>&version-id-marker=<string>&MaxKeys=<string>&KeyMarker=<string>&VersionIdMarker=<string>&versions=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{Bucket}}"
							],
							"query": [
								{
									"key": "versions",
									"value": null
								},
								{
									"key": "delimiter",
									"value": "<string>",
									"description": "A delimiter is a character that you specify to group keys. All keys that contain the same string between the `prefix` and the first occurrence of the delimiter are grouped under a single result element in CommonPrefixes. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response."
								},
								{
									"key": "encoding-type",
									"value": "url"
								},
								{
									"key": "key-marker",
									"value": "<string>",
									"description": "Specifies the key to start with when listing objects in a bucket."
								},
								{
									"key": "max-keys",
									"value": "<integer>",
									"description": "Sets the maximum number of keys returned in the response. By default the operation returns up to 1,000 key names. The response might contain fewer keys but will never contain more. If additional keys satisfy the search criteria, but were not returned because max-keys was exceeded, the response contains &lt;isTruncated&gt;true&lt;/isTruncated&gt;. To return the additional keys, see key-marker and version-id-marker."
								},
								{
									"key": "prefix",
									"value": "<string>",
									"description": "Use this parameter to select only those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different groupings of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.) You can use prefix with delimiter to roll up numerous objects into a single result under CommonPrefixes. "
								},
								{
									"key": "version-id-marker",
									"value": "<string>",
									"description": "Specifies the object version you want to start listing from."
								},
								{
									"key": "MaxKeys",
									"value": "<string>",
									"description": "Pagination limit"
								},
								{
									"key": "KeyMarker",
									"value": "<string>",
									"description": "Pagination token"
								},
								{
									"key": "VersionIdMarker",
									"value": "<string>",
									"description": "Pagination token"
								},
								{
									"key": "versions",
									"value": "true",
									"description": "(Required) "
								}
							]
						},
						"description": "<p>Returns metadata about all versions of the objects in a bucket. You can also use request parameters as selection criteria to return metadata about a subset of all the object versions.</p> <important> <p> To use this operation, you must have permissions to perform the `ListBucketVersions` operation. Be aware of the name difference. </p> </important> <note> <p> A 200 OK response can contain valid or invalid XML. Make sure to design your application to parse the contents of the response and handle it appropriately.</p> </note> <p>To use this operation, you must have READ access to the bucket.</p>"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{Bucket}}?delimiter=<string>&encoding-type=url&key-marker=<string>&max-keys=<integer>&prefix=<string>&version-id-marker=<string>&MaxKeys=<string>&KeyMarker=<string>&VersionIdMarker=<string>&versions=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{Bucket}}"
									],
									"query": [
										{
											"key": "delimiter",
											"value": "<string>",
											"description": "A delimiter is a character that you specify to group keys. All keys that contain the same string between the `prefix` and the first occurrence of the delimiter are grouped under a single result element in CommonPrefixes. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response."
										},
										{
											"key": "encoding-type",
											"value": "url"
										},
										{
											"key": "key-marker",
											"value": "<string>",
											"description": "Specifies the key to start with when listing objects in a bucket."
										},
										{
											"key": "max-keys",
											"value": "<integer>",
											"description": "Sets the maximum number of keys returned in the response. By default the operation returns up to 1,000 key names. The response might contain fewer keys but will never contain more. If additional keys satisfy the search criteria, but were not returned because max-keys was exceeded, the response contains &lt;isTruncated&gt;true&lt;/isTruncated&gt;. To return the additional keys, see key-marker and version-id-marker."
										},
										{
											"key": "prefix",
											"value": "<string>",
											"description": "Use this parameter to select only those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different groupings of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.) You can use prefix with delimiter to roll up numerous objects into a single result under CommonPrefixes. "
										},
										{
											"key": "version-id-marker",
											"value": "<string>",
											"description": "Specifies the object version you want to start listing from."
										},
										{
											"key": "MaxKeys",
											"value": "<string>",
											"description": "Pagination limit"
										},
										{
											"key": "KeyMarker",
											"value": "<string>",
											"description": "Pagination token"
										},
										{
											"key": "VersionIdMarker",
											"value": "<string>",
											"description": "Pagination token"
										},
										{
											"key": "versions",
											"value": "true",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "x-amz-request-id",
									"value": "",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<element>\n  <IsTruncated>(boolean)</IsTruncated>\n  <KeyMarker>(string)</KeyMarker>\n  <VersionIdMarker>(string)</VersionIdMarker>\n  <NextKeyMarker>(string)</NextKeyMarker>\n  <NextVersionIdMarker>(string)</NextVersionIdMarker>\n  <Versions>\n    <ETag>(string)</ETag>\n    <Size>(integer)</Size>\n    <StorageClass>(string)</StorageClass>\n    <Key>(string)</Key>\n    <VersionId>(string)</VersionId>\n    <IsLatest>(boolean)</IsLatest>\n    <LastModified>(string)</LastModified>\n    <Owner>\n      <ID>(integer)</ID>\n      <DisplayName>(string)</DisplayName>\n    </Owner>\n  </Versions>\n  <Versions>\n    <ETag>(string)</ETag>\n    <Size>(integer)</Size>\n    <StorageClass>(string)</StorageClass>\n    <Key>(string)</Key>\n    <VersionId>(string)</VersionId>\n    <IsLatest>(boolean)</IsLatest>\n    <LastModified>(string)</LastModified>\n    <Owner>\n      <ID>(integer)</ID>\n      <DisplayName>(string)</DisplayName>\n    </Owner>\n  </Versions>\n  <Name>(string)</Name>\n  <Prefix>(string)</Prefix>\n  <Delimiter>(string)</Delimiter>\n  <MaxKeys>(integer)</MaxKeys>\n  <CommonPrefixes>\n    <Prefix>(string)</Prefix>\n  </CommonPrefixes>\n  <CommonPrefixes>\n    <Prefix>(string)</Prefix>\n  </CommonPrefixes>\n  <EncodingType>(string)</EncodingType>\n</element>"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://s3.eu-central-3.ionoscloud.com"
		},
		{
			"key": "Key",
			"value": "<string>"
		},
		{
			"key": "Bucket",
			"value": "<string>"
		}
	]
}